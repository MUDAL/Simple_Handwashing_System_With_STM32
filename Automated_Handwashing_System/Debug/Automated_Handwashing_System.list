
Automated_Handwashing_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a14  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b40  08002b40  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002b40  08002b40  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b40  08002b40  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b40  08002b40  00012b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b44  08002b44  00012b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08002b54  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08002b54  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007eab  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000152f  00000000  00000000  00027ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  00029410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  00029d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001661c  00000000  00000000  0002a638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000956f  00000000  00000000  00040c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000840e7  00000000  00000000  0004a1c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce2aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d4  00000000  00000000  000ce2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b08 	.word	0x08002b08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002b08 	.word	0x08002b08

0800014c <HandsDetected>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool HandsDetected(TIM_HandleTypeDef* htim)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	uint32_t pulseWidth = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
	if((htim->Instance->SR & TIM_SR_CC2IF) == TIM_SR_CC2IF)
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	681b      	ldr	r3, [r3, #0]
 800015c:	691b      	ldr	r3, [r3, #16]
 800015e:	f003 0304 	and.w	r3, r3, #4
 8000162:	2b04      	cmp	r3, #4
 8000164:	d103      	bne.n	800016e <HandsDetected+0x22>
	{
		pulseWidth = htim->Instance->CCR2;
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800016c:	60fb      	str	r3, [r7, #12]
	}
	if(pulseWidth < MAX_PULSE_WIDTH)
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	2b27      	cmp	r3, #39	; 0x27
 8000172:	d801      	bhi.n	8000178 <HandsDetected+0x2c>
	{
		return true;
 8000174:	2301      	movs	r3, #1
 8000176:	e000      	b.n	800017a <HandsDetected+0x2e>
	}
	return false;
 8000178:	2300      	movs	r3, #0
}
 800017a:	4618      	mov	r0, r3
 800017c:	3714      	adds	r7, #20
 800017e:	46bd      	mov	sp, r7
 8000180:	bc80      	pop	{r7}
 8000182:	4770      	bx	lr

08000184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	b084      	sub	sp, #16
 8000188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  //Variable(s)
  const uint32_t soapDispensationTime = 10000; //10 secs default
 800018a:	f242 7310 	movw	r3, #10000	; 0x2710
 800018e:	607b      	str	r3, [r7, #4]
  const uint32_t soapValveShutOffTime = 60000; //1 minute default
 8000190:	f64e 2360 	movw	r3, #60000	; 0xea60
 8000194:	603b      	str	r3, [r7, #0]
  bool soapFlowDisabled = false;
 8000196:	2300      	movs	r3, #0
 8000198:	73fb      	strb	r3, [r7, #15]
  bool soapDispenseStarted = false;
 800019a:	2300      	movs	r3, #0
 800019c:	73bb      	strb	r3, [r7, #14]
  bool soapValveShutOff = false;
 800019e:	2300      	movs	r3, #0
 80001a0:	737b      	strb	r3, [r7, #13]
  bool firstTickMeasured = false;
 80001a2:	2300      	movs	r3, #0
 80001a4:	733b      	strb	r3, [r7, #12]
  uint32_t currTick = 0; //current tick
 80001a6:	2300      	movs	r3, #0
 80001a8:	60bb      	str	r3, [r7, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001aa:	f000 fd0d 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ae:	f000 f8a1 	bl	80002f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001b2:	f000 faff 	bl	80007b4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001b6:	f000 f8dd 	bl	8000374 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001ba:	f000 f963 	bl	8000484 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001be:	f000 f9e9 	bl	8000594 <MX_TIM3_Init>
  MX_TIM4_Init();
 80001c2:	f000 fa6f 	bl	80006a4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //Indicate power on (turn power LED on for some seconds, then turn off)
  HAL_GPIO_WritePin(powerLED_GPIO_Port, powerLED_Pin, GPIO_PIN_SET);
 80001c6:	2201      	movs	r2, #1
 80001c8:	2108      	movs	r1, #8
 80001ca:	4845      	ldr	r0, [pc, #276]	; (80002e0 <main+0x15c>)
 80001cc:	f000 ffea 	bl	80011a4 <HAL_GPIO_WritePin>
  HAL_Delay(3000);
 80001d0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80001d4:	f000 fd5a 	bl	8000c8c <HAL_Delay>
  HAL_GPIO_WritePin(powerLED_GPIO_Port, powerLED_Pin, GPIO_PIN_RESET);
 80001d8:	2200      	movs	r2, #0
 80001da:	2108      	movs	r1, #8
 80001dc:	4840      	ldr	r0, [pc, #256]	; (80002e0 <main+0x15c>)
 80001de:	f000 ffe1 	bl	80011a4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(500);
 80001e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001e6:	f000 fd51 	bl	8000c8c <HAL_Delay>
	  //Read soap sensor and actuate soap valve
	  if(HandsDetected(&htim2))
 80001ea:	483e      	ldr	r0, [pc, #248]	; (80002e4 <main+0x160>)
 80001ec:	f7ff ffae 	bl	800014c <HandsDetected>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d019      	beq.n	800022a <main+0xa6>
	  {
		  if(!soapFlowDisabled)
 80001f6:	7bfb      	ldrb	r3, [r7, #15]
 80001f8:	f083 0301 	eor.w	r3, r3, #1
 80001fc:	b2db      	uxtb	r3, r3
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d019      	beq.n	8000236 <main+0xb2>
		  {
			  HAL_GPIO_WritePin(soapValve_GPIO_Port, soapValve_Pin, GPIO_PIN_SET);
 8000202:	2201      	movs	r2, #1
 8000204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000208:	4837      	ldr	r0, [pc, #220]	; (80002e8 <main+0x164>)
 800020a:	f000 ffcb 	bl	80011a4 <HAL_GPIO_WritePin>
			  soapDispenseStarted = true;
 800020e:	2301      	movs	r3, #1
 8000210:	73bb      	strb	r3, [r7, #14]
			  if(!firstTickMeasured)
 8000212:	7b3b      	ldrb	r3, [r7, #12]
 8000214:	f083 0301 	eor.w	r3, r3, #1
 8000218:	b2db      	uxtb	r3, r3
 800021a:	2b00      	cmp	r3, #0
 800021c:	d00b      	beq.n	8000236 <main+0xb2>
			  {
				  currTick = HAL_GetTick();
 800021e:	f000 fd2b 	bl	8000c78 <HAL_GetTick>
 8000222:	60b8      	str	r0, [r7, #8]
				  firstTickMeasured = true;
 8000224:	2301      	movs	r3, #1
 8000226:	733b      	strb	r3, [r7, #12]
 8000228:	e005      	b.n	8000236 <main+0xb2>
			  }
		  }
	  }
	  else
	  {
		  HAL_GPIO_WritePin(soapValve_GPIO_Port, soapValve_Pin, GPIO_PIN_RESET);
 800022a:	2200      	movs	r2, #0
 800022c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000230:	482d      	ldr	r0, [pc, #180]	; (80002e8 <main+0x164>)
 8000232:	f000 ffb7 	bl	80011a4 <HAL_GPIO_WritePin>
	  }
	  //If soap dispensation time has elapsed, shut-off ..
	  //the soap valve and start blinking LED
	  if(soapDispenseStarted)
 8000236:	7bbb      	ldrb	r3, [r7, #14]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d018      	beq.n	800026e <main+0xea>
	  {
		  if((HAL_GetTick() - currTick) >= soapDispensationTime)
 800023c:	f000 fd1c 	bl	8000c78 <HAL_GetTick>
 8000240:	4602      	mov	r2, r0
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	1ad3      	subs	r3, r2, r3
 8000246:	687a      	ldr	r2, [r7, #4]
 8000248:	429a      	cmp	r2, r3
 800024a:	d810      	bhi.n	800026e <main+0xea>
		  {
			  HAL_GPIO_WritePin(soapValve_GPIO_Port, soapValve_Pin, GPIO_PIN_RESET);
 800024c:	2200      	movs	r2, #0
 800024e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000252:	4825      	ldr	r0, [pc, #148]	; (80002e8 <main+0x164>)
 8000254:	f000 ffa6 	bl	80011a4 <HAL_GPIO_WritePin>
			  soapFlowDisabled = true;
 8000258:	2301      	movs	r3, #1
 800025a:	73fb      	strb	r3, [r7, #15]
			  soapValveShutOff = true;
 800025c:	2301      	movs	r3, #1
 800025e:	737b      	strb	r3, [r7, #13]
			  soapDispenseStarted = false;
 8000260:	2300      	movs	r3, #0
 8000262:	73bb      	strb	r3, [r7, #14]
			  currTick = HAL_GetTick();
 8000264:	f000 fd08 	bl	8000c78 <HAL_GetTick>
 8000268:	60b8      	str	r0, [r7, #8]
			  StartTogglingLED();
 800026a:	f000 fc17 	bl	8000a9c <StartTogglingLED>
		  }
	  }
	  //If valve shut off time has elapsed, restore ....
	  //soap valve and sensor
	  if(soapValveShutOff)
 800026e:	7b7b      	ldrb	r3, [r7, #13]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d00f      	beq.n	8000294 <main+0x110>
	  {
		  if((HAL_GetTick() - currTick) >= soapValveShutOffTime)
 8000274:	f000 fd00 	bl	8000c78 <HAL_GetTick>
 8000278:	4602      	mov	r2, r0
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	1ad3      	subs	r3, r2, r3
 800027e:	683a      	ldr	r2, [r7, #0]
 8000280:	429a      	cmp	r2, r3
 8000282:	d807      	bhi.n	8000294 <main+0x110>
		  {
			  soapValveShutOff = false;
 8000284:	2300      	movs	r3, #0
 8000286:	737b      	strb	r3, [r7, #13]
			  soapFlowDisabled = false;
 8000288:	2300      	movs	r3, #0
 800028a:	73fb      	strb	r3, [r7, #15]
			  firstTickMeasured = false;
 800028c:	2300      	movs	r3, #0
 800028e:	733b      	strb	r3, [r7, #12]
			  StopTogglingLED();
 8000290:	f000 fc10 	bl	8000ab4 <StopTogglingLED>
		  }
	  }

	  //Read fan sensor and actuate fan
	  if(HandsDetected(&htim3))
 8000294:	4815      	ldr	r0, [pc, #84]	; (80002ec <main+0x168>)
 8000296:	f7ff ff59 	bl	800014c <HandsDetected>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d005      	beq.n	80002ac <main+0x128>
	  {
		 HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, GPIO_PIN_SET);
 80002a0:	2201      	movs	r2, #1
 80002a2:	2120      	movs	r1, #32
 80002a4:	4810      	ldr	r0, [pc, #64]	; (80002e8 <main+0x164>)
 80002a6:	f000 ff7d 	bl	80011a4 <HAL_GPIO_WritePin>
 80002aa:	e004      	b.n	80002b6 <main+0x132>
	  }
	  else
	  {
		 HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2120      	movs	r1, #32
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <main+0x164>)
 80002b2:	f000 ff77 	bl	80011a4 <HAL_GPIO_WritePin>
	  }
	  //Read water sensor and actuate water valve
	  if(HandsDetected(&htim4))
 80002b6:	480e      	ldr	r0, [pc, #56]	; (80002f0 <main+0x16c>)
 80002b8:	f7ff ff48 	bl	800014c <HandsDetected>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d006      	beq.n	80002d0 <main+0x14c>
	  {
		  HAL_GPIO_WritePin(waterValve_GPIO_Port, waterValve_Pin, GPIO_PIN_SET);
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4807      	ldr	r0, [pc, #28]	; (80002e8 <main+0x164>)
 80002ca:	f000 ff6b 	bl	80011a4 <HAL_GPIO_WritePin>
 80002ce:	e788      	b.n	80001e2 <main+0x5e>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(waterValve_GPIO_Port, waterValve_Pin, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002d6:	4804      	ldr	r0, [pc, #16]	; (80002e8 <main+0x164>)
 80002d8:	f000 ff64 	bl	80011a4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80002dc:	e781      	b.n	80001e2 <main+0x5e>
 80002de:	bf00      	nop
 80002e0:	40010800 	.word	0x40010800
 80002e4:	20000070 	.word	0x20000070
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	200000b8 	.word	0x200000b8
 80002f0:	20000100 	.word	0x20000100

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b090      	sub	sp, #64	; 0x40
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	2228      	movs	r2, #40	; 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fbf8 	bl	8002af8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000316:	2302      	movs	r3, #2
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800031a:	2301      	movs	r3, #1
 800031c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	2310      	movs	r3, #16
 8000320:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000322:	2302      	movs	r3, #2
 8000324:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000326:	2300      	movs	r3, #0
 8000328:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800032a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800032e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000330:	f107 0318 	add.w	r3, r7, #24
 8000334:	4618      	mov	r0, r3
 8000336:	f000 ff67 	bl	8001208 <HAL_RCC_OscConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000340:	f000 fa8c 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000344:	230f      	movs	r3, #15
 8000346:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	2302      	movs	r3, #2
 800034a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000350:	2300      	movs	r3, #0
 8000352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2100      	movs	r1, #0
 800035c:	4618      	mov	r0, r3
 800035e:	f001 f9d5 	bl	800170c <HAL_RCC_ClockConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000368:	f000 fa78 	bl	800085c <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3740      	adds	r7, #64	; 0x40
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b092      	sub	sp, #72	; 0x48
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800037a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
 8000394:	615a      	str	r2, [r3, #20]
 8000396:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000398:	1d3b      	adds	r3, r7, #4
 800039a:	2220      	movs	r2, #32
 800039c:	2100      	movs	r1, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f002 fbaa 	bl	8002af8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003a4:	4b35      	ldr	r3, [pc, #212]	; (800047c <MX_TIM1_Init+0x108>)
 80003a6:	4a36      	ldr	r2, [pc, #216]	; (8000480 <MX_TIM1_Init+0x10c>)
 80003a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10 - 1;
 80003aa:	4b34      	ldr	r3, [pc, #208]	; (800047c <MX_TIM1_Init+0x108>)
 80003ac:	2209      	movs	r2, #9
 80003ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b0:	4b32      	ldr	r3, [pc, #200]	; (800047c <MX_TIM1_Init+0x108>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32000 - 1;
 80003b6:	4b31      	ldr	r3, [pc, #196]	; (800047c <MX_TIM1_Init+0x108>)
 80003b8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80003bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003be:	4b2f      	ldr	r3, [pc, #188]	; (800047c <MX_TIM1_Init+0x108>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003c4:	4b2d      	ldr	r3, [pc, #180]	; (800047c <MX_TIM1_Init+0x108>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80003ca:	4b2c      	ldr	r3, [pc, #176]	; (800047c <MX_TIM1_Init+0x108>)
 80003cc:	2280      	movs	r2, #128	; 0x80
 80003ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80003d0:	482a      	ldr	r0, [pc, #168]	; (800047c <MX_TIM1_Init+0x108>)
 80003d2:	f001 fb01 	bl	80019d8 <HAL_TIM_PWM_Init>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80003dc:	f000 fa3e 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e0:	2300      	movs	r3, #0
 80003e2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003ec:	4619      	mov	r1, r3
 80003ee:	4823      	ldr	r0, [pc, #140]	; (800047c <MX_TIM1_Init+0x108>)
 80003f0:	f002 faae 	bl	8002950 <HAL_TIMEx_MasterConfigSynchronization>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80003fa:	f000 fa2f 	bl	800085c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003fe:	2360      	movs	r3, #96	; 0x60
 8000400:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 24;
 8000402:	2318      	movs	r3, #24
 8000404:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000406:	2300      	movs	r3, #0
 8000408:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800040a:	2300      	movs	r3, #0
 800040c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800040e:	2300      	movs	r3, #0
 8000410:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000412:	2300      	movs	r3, #0
 8000414:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000416:	2300      	movs	r3, #0
 8000418:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800041a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800041e:	2204      	movs	r2, #4
 8000420:	4619      	mov	r1, r3
 8000422:	4816      	ldr	r0, [pc, #88]	; (800047c <MX_TIM1_Init+0x108>)
 8000424:	f001 fd6e 	bl	8001f04 <HAL_TIM_PWM_ConfigChannel>
 8000428:	4603      	mov	r3, r0
 800042a:	2b00      	cmp	r3, #0
 800042c:	d001      	beq.n	8000432 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800042e:	f000 fa15 	bl	800085c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000432:	2300      	movs	r3, #0
 8000434:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800044a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800044c:	2300      	movs	r3, #0
 800044e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000450:	1d3b      	adds	r3, r7, #4
 8000452:	4619      	mov	r1, r3
 8000454:	4809      	ldr	r0, [pc, #36]	; (800047c <MX_TIM1_Init+0x108>)
 8000456:	f002 fad9 	bl	8002a0c <HAL_TIMEx_ConfigBreakDeadTime>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000460:	f000 f9fc 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  //Start PWM signal for ultrasonic sensors
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000464:	2104      	movs	r1, #4
 8000466:	4805      	ldr	r0, [pc, #20]	; (800047c <MX_TIM1_Init+0x108>)
 8000468:	f001 fb06 	bl	8001a78 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <MX_TIM1_Init+0x108>)
 800046e:	f000 fae1 	bl	8000a34 <HAL_TIM_MspPostInit>

}
 8000472:	bf00      	nop
 8000474:	3748      	adds	r7, #72	; 0x48
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000028 	.word	0x20000028
 8000480:	40012c00 	.word	0x40012c00

08000484 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b08c      	sub	sp, #48	; 0x30
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800048a:	f107 031c 	add.w	r3, r7, #28
 800048e:	2200      	movs	r2, #0
 8000490:	601a      	str	r2, [r3, #0]
 8000492:	605a      	str	r2, [r3, #4]
 8000494:	609a      	str	r2, [r3, #8]
 8000496:	60da      	str	r2, [r3, #12]
 8000498:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800049a:	f107 030c 	add.w	r3, r7, #12
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004b0:	4b37      	ldr	r3, [pc, #220]	; (8000590 <MX_TIM2_Init+0x10c>)
 80004b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200 - 1;
 80004b8:	4b35      	ldr	r3, [pc, #212]	; (8000590 <MX_TIM2_Init+0x10c>)
 80004ba:	22c7      	movs	r2, #199	; 0xc7
 80004bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004be:	4b34      	ldr	r3, [pc, #208]	; (8000590 <MX_TIM2_Init+0x10c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000 - 1;
 80004c4:	4b32      	ldr	r3, [pc, #200]	; (8000590 <MX_TIM2_Init+0x10c>)
 80004c6:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80004ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004cc:	4b30      	ldr	r3, [pc, #192]	; (8000590 <MX_TIM2_Init+0x10c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80004d2:	4b2f      	ldr	r3, [pc, #188]	; (8000590 <MX_TIM2_Init+0x10c>)
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80004d8:	482d      	ldr	r0, [pc, #180]	; (8000590 <MX_TIM2_Init+0x10c>)
 80004da:	f001 fb6f 	bl	8001bbc <HAL_TIM_IC_Init>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d001      	beq.n	80004e8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80004e4:	f000 f9ba 	bl	800085c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80004e8:	2304      	movs	r3, #4
 80004ea:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80004ec:	2350      	movs	r3, #80	; 0x50
 80004ee:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004f0:	2300      	movs	r3, #0
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0x0F;
 80004f8:	230f      	movs	r3, #15
 80004fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80004fc:	f107 031c 	add.w	r3, r7, #28
 8000500:	4619      	mov	r1, r3
 8000502:	4823      	ldr	r0, [pc, #140]	; (8000590 <MX_TIM2_Init+0x10c>)
 8000504:	f001 fdbc 	bl	8002080 <HAL_TIM_SlaveConfigSynchro>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800050e:	f000 f9a5 	bl	800085c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000516:	2301      	movs	r3, #1
 8000518:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0x0F;
 800051e:	230f      	movs	r3, #15
 8000520:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	2200      	movs	r2, #0
 8000528:	4619      	mov	r1, r3
 800052a:	4819      	ldr	r0, [pc, #100]	; (8000590 <MX_TIM2_Init+0x10c>)
 800052c:	f001 fc56 	bl	8001ddc <HAL_TIM_IC_ConfigChannel>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000536:	f000 f991 	bl	800085c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800053a:	2302      	movs	r3, #2
 800053c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800053e:	2302      	movs	r3, #2
 8000540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	2204      	movs	r2, #4
 8000548:	4619      	mov	r1, r3
 800054a:	4811      	ldr	r0, [pc, #68]	; (8000590 <MX_TIM2_Init+0x10c>)
 800054c:	f001 fc46 	bl	8001ddc <HAL_TIM_IC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000556:	f000 f981 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	4619      	mov	r1, r3
 8000566:	480a      	ldr	r0, [pc, #40]	; (8000590 <MX_TIM2_Init+0x10c>)
 8000568:	f002 f9f2 	bl	8002950 <HAL_TIMEx_MasterConfigSynchronization>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000572:	f000 f973 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  //Start input capture
  HAL_TIM_IC_Start(&htim2,TIM_CHANNEL_1);
 8000576:	2100      	movs	r1, #0
 8000578:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_TIM2_Init+0x10c>)
 800057a:	f001 fb6f 	bl	8001c5c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2,TIM_CHANNEL_2);
 800057e:	2104      	movs	r1, #4
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <MX_TIM2_Init+0x10c>)
 8000582:	f001 fb6b 	bl	8001c5c <HAL_TIM_IC_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8000586:	bf00      	nop
 8000588:	3730      	adds	r7, #48	; 0x30
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000070 	.word	0x20000070

08000594 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	; 0x30
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80005aa:	f107 030c 	add.w	r3, r7, #12
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005c0:	4b36      	ldr	r3, [pc, #216]	; (800069c <MX_TIM3_Init+0x108>)
 80005c2:	4a37      	ldr	r2, [pc, #220]	; (80006a0 <MX_TIM3_Init+0x10c>)
 80005c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200 - 1;
 80005c6:	4b35      	ldr	r3, [pc, #212]	; (800069c <MX_TIM3_Init+0x108>)
 80005c8:	22c7      	movs	r2, #199	; 0xc7
 80005ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005cc:	4b33      	ldr	r3, [pc, #204]	; (800069c <MX_TIM3_Init+0x108>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000 - 1;
 80005d2:	4b32      	ldr	r3, [pc, #200]	; (800069c <MX_TIM3_Init+0x108>)
 80005d4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80005d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005da:	4b30      	ldr	r3, [pc, #192]	; (800069c <MX_TIM3_Init+0x108>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005e0:	4b2e      	ldr	r3, [pc, #184]	; (800069c <MX_TIM3_Init+0x108>)
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80005e6:	482d      	ldr	r0, [pc, #180]	; (800069c <MX_TIM3_Init+0x108>)
 80005e8:	f001 fae8 	bl	8001bbc <HAL_TIM_IC_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 80005f2:	f000 f933 	bl	800085c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80005f6:	2304      	movs	r3, #4
 80005f8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80005fa:	2350      	movs	r3, #80	; 0x50
 80005fc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005fe:	2300      	movs	r3, #0
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0x0F;
 8000606:	230f      	movs	r3, #15
 8000608:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800060a:	f107 031c 	add.w	r3, r7, #28
 800060e:	4619      	mov	r1, r3
 8000610:	4822      	ldr	r0, [pc, #136]	; (800069c <MX_TIM3_Init+0x108>)
 8000612:	f001 fd35 	bl	8002080 <HAL_TIM_SlaveConfigSynchro>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800061c:	f000 f91e 	bl	800085c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000624:	2301      	movs	r3, #1
 8000626:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0x0F;
 800062c:	230f      	movs	r3, #15
 800062e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	4619      	mov	r1, r3
 8000638:	4818      	ldr	r0, [pc, #96]	; (800069c <MX_TIM3_Init+0x108>)
 800063a:	f001 fbcf 	bl	8001ddc <HAL_TIM_IC_ConfigChannel>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000644:	f000 f90a 	bl	800085c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000648:	2302      	movs	r3, #2
 800064a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800064c:	2302      	movs	r3, #2
 800064e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2204      	movs	r2, #4
 8000656:	4619      	mov	r1, r3
 8000658:	4810      	ldr	r0, [pc, #64]	; (800069c <MX_TIM3_Init+0x108>)
 800065a:	f001 fbbf 	bl	8001ddc <HAL_TIM_IC_ConfigChannel>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000664:	f000 f8fa 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	4619      	mov	r1, r3
 8000674:	4809      	ldr	r0, [pc, #36]	; (800069c <MX_TIM3_Init+0x108>)
 8000676:	f002 f96b 	bl	8002950 <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000680:	f000 f8ec 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  //Start input capture
  HAL_TIM_IC_Start(&htim3,TIM_CHANNEL_1);
 8000684:	2100      	movs	r1, #0
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_TIM3_Init+0x108>)
 8000688:	f001 fae8 	bl	8001c5c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3,TIM_CHANNEL_2);
 800068c:	2104      	movs	r1, #4
 800068e:	4803      	ldr	r0, [pc, #12]	; (800069c <MX_TIM3_Init+0x108>)
 8000690:	f001 fae4 	bl	8001c5c <HAL_TIM_IC_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3730      	adds	r7, #48	; 0x30
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	200000b8 	.word	0x200000b8
 80006a0:	40000400 	.word	0x40000400

080006a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08c      	sub	sp, #48	; 0x30
 80006a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80006aa:	f107 031c 	add.w	r3, r7, #28
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80006ba:	f107 030c 	add.w	r3, r7, #12
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80006d0:	4b36      	ldr	r3, [pc, #216]	; (80007ac <MX_TIM4_Init+0x108>)
 80006d2:	4a37      	ldr	r2, [pc, #220]	; (80007b0 <MX_TIM4_Init+0x10c>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200 - 1;
 80006d6:	4b35      	ldr	r3, [pc, #212]	; (80007ac <MX_TIM4_Init+0x108>)
 80006d8:	22c7      	movs	r2, #199	; 0xc7
 80006da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b33      	ldr	r3, [pc, #204]	; (80007ac <MX_TIM4_Init+0x108>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000 - 1;
 80006e2:	4b32      	ldr	r3, [pc, #200]	; (80007ac <MX_TIM4_Init+0x108>)
 80006e4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80006e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ea:	4b30      	ldr	r3, [pc, #192]	; (80007ac <MX_TIM4_Init+0x108>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006f0:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <MX_TIM4_Init+0x108>)
 80006f2:	2280      	movs	r2, #128	; 0x80
 80006f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80006f6:	482d      	ldr	r0, [pc, #180]	; (80007ac <MX_TIM4_Init+0x108>)
 80006f8:	f001 fa60 	bl	8001bbc <HAL_TIM_IC_Init>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000702:	f000 f8ab 	bl	800085c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000706:	2304      	movs	r3, #4
 8000708:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800070a:	2350      	movs	r3, #80	; 0x50
 800070c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0x0F;
 8000716:	230f      	movs	r3, #15
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	4619      	mov	r1, r3
 8000720:	4822      	ldr	r0, [pc, #136]	; (80007ac <MX_TIM4_Init+0x108>)
 8000722:	f001 fcad 	bl	8002080 <HAL_TIM_SlaveConfigSynchro>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800072c:	f000 f896 	bl	800085c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000730:	2300      	movs	r3, #0
 8000732:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000734:	2301      	movs	r3, #1
 8000736:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0x0F;
 800073c:	230f      	movs	r3, #15
 800073e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	4818      	ldr	r0, [pc, #96]	; (80007ac <MX_TIM4_Init+0x108>)
 800074a:	f001 fb47 	bl	8001ddc <HAL_TIM_IC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000754:	f000 f882 	bl	800085c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000758:	2302      	movs	r3, #2
 800075a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2204      	movs	r2, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <MX_TIM4_Init+0x108>)
 800076a:	f001 fb37 	bl	8001ddc <HAL_TIM_IC_ConfigChannel>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000774:	f000 f872 	bl	800085c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4809      	ldr	r0, [pc, #36]	; (80007ac <MX_TIM4_Init+0x108>)
 8000786:	f002 f8e3 	bl	8002950 <HAL_TIMEx_MasterConfigSynchronization>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000790:	f000 f864 	bl	800085c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  //Start input capture
  HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_1);
 8000794:	2100      	movs	r1, #0
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_TIM4_Init+0x108>)
 8000798:	f001 fa60 	bl	8001c5c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_2);
 800079c:	2104      	movs	r1, #4
 800079e:	4803      	ldr	r0, [pc, #12]	; (80007ac <MX_TIM4_Init+0x108>)
 80007a0:	f001 fa5c 	bl	8001c5c <HAL_TIM_IC_Start>
  /* USER CODE END TIM4_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3730      	adds	r7, #48	; 0x30
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000100 	.word	0x20000100
 80007b0:	40000800 	.word	0x40000800

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b086      	sub	sp, #24
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c8:	4b21      	ldr	r3, [pc, #132]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	4a20      	ldr	r2, [pc, #128]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007ce:	f043 0304 	orr.w	r3, r3, #4
 80007d2:	6193      	str	r3, [r2, #24]
 80007d4:	4b1e      	ldr	r3, [pc, #120]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	f003 0304 	and.w	r3, r3, #4
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007e6:	f043 0308 	orr.w	r3, r3, #8
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b18      	ldr	r3, [pc, #96]	; (8000850 <MX_GPIO_Init+0x9c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f003 0308 	and.w	r3, r3, #8
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, powerLED_Pin|soapLED_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	2128      	movs	r1, #40	; 0x28
 80007fc:	4815      	ldr	r0, [pc, #84]	; (8000854 <MX_GPIO_Init+0xa0>)
 80007fe:	f000 fcd1 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, soapValve_Pin|waterValve_Pin|fan_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f44f 51a1 	mov.w	r1, #5152	; 0x1420
 8000808:	4813      	ldr	r0, [pc, #76]	; (8000858 <MX_GPIO_Init+0xa4>)
 800080a:	f000 fccb 	bl	80011a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : powerLED_Pin soapLED_Pin */
  GPIO_InitStruct.Pin = powerLED_Pin|soapLED_Pin;
 800080e:	2328      	movs	r3, #40	; 0x28
 8000810:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2302      	movs	r3, #2
 800081c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 0308 	add.w	r3, r7, #8
 8000822:	4619      	mov	r1, r3
 8000824:	480b      	ldr	r0, [pc, #44]	; (8000854 <MX_GPIO_Init+0xa0>)
 8000826:	f000 fb39 	bl	8000e9c <HAL_GPIO_Init>

  /*Configure GPIO pins : soapValve_Pin waterValve_Pin fan_Pin */
  GPIO_InitStruct.Pin = soapValve_Pin|waterValve_Pin|fan_Pin;
 800082a:	f44f 53a1 	mov.w	r3, #5152	; 0x1420
 800082e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2302      	movs	r3, #2
 800083a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	4619      	mov	r1, r3
 8000842:	4805      	ldr	r0, [pc, #20]	; (8000858 <MX_GPIO_Init+0xa4>)
 8000844:	f000 fb2a 	bl	8000e9c <HAL_GPIO_Init>

}
 8000848:	bf00      	nop
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40021000 	.word	0x40021000
 8000854:	40010800 	.word	0x40010800
 8000858:	40010c00 	.word	0x40010c00

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	e7fe      	b.n	8000864 <Error_Handler+0x8>
	...

08000868 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800086e:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <HAL_MspInit+0x5c>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	4a14      	ldr	r2, [pc, #80]	; (80008c4 <HAL_MspInit+0x5c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6193      	str	r3, [r2, #24]
 800087a:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <HAL_MspInit+0x5c>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <HAL_MspInit+0x5c>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_MspInit+0x5c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	61d3      	str	r3, [r2, #28]
 8000892:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_MspInit+0x5c>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <HAL_MspInit+0x60>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <HAL_MspInit+0x60>)
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3714      	adds	r7, #20
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40010000 	.word	0x40010000

080008cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a09      	ldr	r2, [pc, #36]	; (8000900 <HAL_TIM_PWM_MspInit+0x34>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d10b      	bne.n	80008f6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_TIM_PWM_MspInit+0x38>)
 80008e0:	699b      	ldr	r3, [r3, #24]
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_TIM_PWM_MspInit+0x38>)
 80008e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008e8:	6193      	str	r3, [r2, #24]
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_TIM_PWM_MspInit+0x38>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	40012c00 	.word	0x40012c00
 8000904:	40021000 	.word	0x40021000

08000908 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000926:	d124      	bne.n	8000972 <HAL_TIM_IC_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000928:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	4a3c      	ldr	r2, [pc, #240]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	61d3      	str	r3, [r2, #28]
 8000934:	4b3a      	ldr	r3, [pc, #232]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000940:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a36      	ldr	r2, [pc, #216]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = soapSensor_Pin;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(soapSensor_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	4619      	mov	r1, r3
 800096a:	482e      	ldr	r0, [pc, #184]	; (8000a24 <HAL_TIM_IC_MspInit+0x11c>)
 800096c:	f000 fa96 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000970:	e052      	b.n	8000a18 <HAL_TIM_IC_MspInit+0x110>
  else if(htim_ic->Instance==TIM3)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a2c      	ldr	r2, [pc, #176]	; (8000a28 <HAL_TIM_IC_MspInit+0x120>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d124      	bne.n	80009c6 <HAL_TIM_IC_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800097c:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 800097e:	69db      	ldr	r3, [r3, #28]
 8000980:	4a27      	ldr	r2, [pc, #156]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	61d3      	str	r3, [r2, #28]
 8000988:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 800098a:	69db      	ldr	r3, [r3, #28]
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	617b      	str	r3, [r7, #20]
 8000992:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000994:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = fanSensor_Pin;
 80009ac:	2340      	movs	r3, #64	; 0x40
 80009ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(fanSensor_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0320 	add.w	r3, r7, #32
 80009bc:	4619      	mov	r1, r3
 80009be:	4819      	ldr	r0, [pc, #100]	; (8000a24 <HAL_TIM_IC_MspInit+0x11c>)
 80009c0:	f000 fa6c 	bl	8000e9c <HAL_GPIO_Init>
}
 80009c4:	e028      	b.n	8000a18 <HAL_TIM_IC_MspInit+0x110>
  else if(htim_ic->Instance==TIM4)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <HAL_TIM_IC_MspInit+0x124>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d123      	bne.n	8000a18 <HAL_TIM_IC_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	4a12      	ldr	r2, [pc, #72]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 80009d6:	f043 0304 	orr.w	r3, r3, #4
 80009da:	61d3      	str	r3, [r2, #28]
 80009dc:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	f003 0304 	and.w	r3, r3, #4
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 80009ee:	f043 0308 	orr.w	r3, r3, #8
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_TIM_IC_MspInit+0x118>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0308 	and.w	r3, r3, #8
 80009fc:	60bb      	str	r3, [r7, #8]
 80009fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = waterSensor_Pin;
 8000a00:	2340      	movs	r3, #64	; 0x40
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(waterSensor_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 0320 	add.w	r3, r7, #32
 8000a10:	4619      	mov	r1, r3
 8000a12:	4807      	ldr	r0, [pc, #28]	; (8000a30 <HAL_TIM_IC_MspInit+0x128>)
 8000a14:	f000 fa42 	bl	8000e9c <HAL_GPIO_Init>
}
 8000a18:	bf00      	nop
 8000a1a:	3730      	adds	r7, #48	; 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010800 	.word	0x40010800
 8000a28:	40000400 	.word	0x40000400
 8000a2c:	40000800 	.word	0x40000800
 8000a30:	40010c00 	.word	0x40010c00

08000a34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b088      	sub	sp, #32
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <HAL_TIM_MspPostInit+0x5c>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d118      	bne.n	8000a86 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_TIM_MspPostInit+0x60>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_TIM_MspPostInit+0x60>)
 8000a5a:	f043 0304 	orr.w	r3, r3, #4
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_TIM_MspPostInit+0x60>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = sensorTrigger_Pin;
 8000a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2302      	movs	r3, #2
 8000a78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(sensorTrigger_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0310 	add.w	r3, r7, #16
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_TIM_MspPostInit+0x64>)
 8000a82:	f000 fa0b 	bl	8000e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a86:	bf00      	nop
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40012c00 	.word	0x40012c00
 8000a94:	40021000 	.word	0x40021000
 8000a98:	40010800 	.word	0x40010800

08000a9c <StartTogglingLED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void StartTogglingLED(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	toggleLED = true;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <StartTogglingLED+0x14>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000148 	.word	0x20000148

08000ab4 <StopTogglingLED>:

void StopTogglingLED(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
	toggleLED = false;
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <StopTogglingLED+0x18>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(soapLED_GPIO_Port, soapLED_Pin, GPIO_PIN_RESET);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	4803      	ldr	r0, [pc, #12]	; (8000ad0 <StopTogglingLED+0x1c>)
 8000ac4:	f000 fb6e 	bl	80011a4 <HAL_GPIO_WritePin>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000148 	.word	0x20000148
 8000ad0:	40010800 	.word	0x40010800

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bc80      	pop	{r7}
 8000afc:	4770      	bx	lr

08000afe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000afe:	b480      	push	{r7}
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr

08000b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b1c:	f000 f89a 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(toggleLED)
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <SysTick_Handler+0x48>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d017      	beq.n	8000b5a <SysTick_Handler+0x42>
  {
	  static uint16_t count;
	  if((count % 1000) == 0)
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <SysTick_Handler+0x4c>)
 8000b2c:	881b      	ldrh	r3, [r3, #0]
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <SysTick_Handler+0x50>)
 8000b30:	fba2 1203 	umull	r1, r2, r2, r3
 8000b34:	0992      	lsrs	r2, r2, #6
 8000b36:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b3a:	fb01 f202 	mul.w	r2, r1, r2
 8000b3e:	1a9b      	subs	r3, r3, r2
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d103      	bne.n	8000b4e <SysTick_Handler+0x36>
	  {
		  HAL_GPIO_TogglePin(soapLED_GPIO_Port, soapLED_Pin);
 8000b46:	2120      	movs	r1, #32
 8000b48:	4808      	ldr	r0, [pc, #32]	; (8000b6c <SysTick_Handler+0x54>)
 8000b4a:	f000 fb43 	bl	80011d4 <HAL_GPIO_TogglePin>
	  }
	  count++;
 8000b4e:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <SysTick_Handler+0x4c>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	3301      	adds	r3, #1
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <SysTick_Handler+0x4c>)
 8000b58:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000148 	.word	0x20000148
 8000b64:	2000014a 	.word	0x2000014a
 8000b68:	10624dd3 	.word	0x10624dd3
 8000b6c:	40010800 	.word	0x40010800

08000b70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b7e:	490d      	ldr	r1, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b94:	4c0a      	ldr	r4, [pc, #40]	; (8000bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba2:	f7ff ffe5 	bl	8000b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f001 ff83 	bl	8002ab0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000baa:	f7ff faeb 	bl	8000184 <main>
  bx lr
 8000bae:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bb8:	08002b48 	.word	0x08002b48
  ldr r2, =_sbss
 8000bbc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc0:	20000150 	.word	0x20000150

08000bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_2_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_Init+0x28>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_Init+0x28>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f92b 	bl	8000e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bde:	200f      	movs	r0, #15
 8000be0:	f000 f808 	bl	8000bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be4:	f7ff fe40 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40022000 	.word	0x40022000

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <HAL_InitTick+0x54>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_InitTick+0x58>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f935 	bl	8000e82 <HAL_SYSTICK_Config>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00e      	b.n	8000c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d80a      	bhi.n	8000c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 f90b 	bl	8000e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_InitTick+0x5c>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000004 	.word	0x20000004

08000c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_IncTick+0x1c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x20>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <HAL_IncTick+0x20>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	20000008 	.word	0x20000008
 8000c74:	2000014c 	.word	0x2000014c

08000c78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b02      	ldr	r3, [pc, #8]	; (8000c88 <HAL_GetTick+0x10>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	2000014c 	.word	0x2000014c

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff fff0 	bl	8000c78 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffe0 	bl	8000c78 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	; (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	; (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	db0a      	blt.n	8000d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	490c      	ldr	r1, [pc, #48]	; (8000d84 <__NVIC_SetPriority+0x4c>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	0112      	lsls	r2, r2, #4
 8000d58:	b2d2      	uxtb	r2, r2
 8000d5a:	440b      	add	r3, r1
 8000d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d60:	e00a      	b.n	8000d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4908      	ldr	r1, [pc, #32]	; (8000d88 <__NVIC_SetPriority+0x50>)
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	3b04      	subs	r3, #4
 8000d70:	0112      	lsls	r2, r2, #4
 8000d72:	b2d2      	uxtb	r2, r2
 8000d74:	440b      	add	r3, r1
 8000d76:	761a      	strb	r2, [r3, #24]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000e100 	.word	0xe000e100
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	f003 0307 	and.w	r3, r3, #7
 8000d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f1c3 0307 	rsb	r3, r3, #7
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	bf28      	it	cs
 8000daa:	2304      	movcs	r3, #4
 8000dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	3304      	adds	r3, #4
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d902      	bls.n	8000dbc <NVIC_EncodePriority+0x30>
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3b03      	subs	r3, #3
 8000dba:	e000      	b.n	8000dbe <NVIC_EncodePriority+0x32>
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	401a      	ands	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	fa01 f303 	lsl.w	r3, r1, r3
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de4:	4313      	orrs	r3, r2
         );
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	; 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e00:	d301      	bcc.n	8000e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e02:	2301      	movs	r3, #1
 8000e04:	e00f      	b.n	8000e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <SysTick_Config+0x40>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0e:	210f      	movs	r1, #15
 8000e10:	f04f 30ff 	mov.w	r0, #4294967295
 8000e14:	f7ff ff90 	bl	8000d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <SysTick_Config+0x40>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <SysTick_Config+0x40>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	e000e010 	.word	0xe000e010

08000e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff49 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b086      	sub	sp, #24
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	4603      	mov	r3, r0
 8000e52:	60b9      	str	r1, [r7, #8]
 8000e54:	607a      	str	r2, [r7, #4]
 8000e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e5c:	f7ff ff5e 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	68b9      	ldr	r1, [r7, #8]
 8000e66:	6978      	ldr	r0, [r7, #20]
 8000e68:	f7ff ff90 	bl	8000d8c <NVIC_EncodePriority>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e72:	4611      	mov	r1, r2
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff5f 	bl	8000d38 <__NVIC_SetPriority>
}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff ffb0 	bl	8000df0 <SysTick_Config>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b08b      	sub	sp, #44	; 0x2c
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eae:	e169      	b.n	8001184 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	69fa      	ldr	r2, [r7, #28]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	f040 8158 	bne.w	800117e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	4a9a      	ldr	r2, [pc, #616]	; (800113c <HAL_GPIO_Init+0x2a0>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d05e      	beq.n	8000f96 <HAL_GPIO_Init+0xfa>
 8000ed8:	4a98      	ldr	r2, [pc, #608]	; (800113c <HAL_GPIO_Init+0x2a0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d875      	bhi.n	8000fca <HAL_GPIO_Init+0x12e>
 8000ede:	4a98      	ldr	r2, [pc, #608]	; (8001140 <HAL_GPIO_Init+0x2a4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d058      	beq.n	8000f96 <HAL_GPIO_Init+0xfa>
 8000ee4:	4a96      	ldr	r2, [pc, #600]	; (8001140 <HAL_GPIO_Init+0x2a4>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d86f      	bhi.n	8000fca <HAL_GPIO_Init+0x12e>
 8000eea:	4a96      	ldr	r2, [pc, #600]	; (8001144 <HAL_GPIO_Init+0x2a8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d052      	beq.n	8000f96 <HAL_GPIO_Init+0xfa>
 8000ef0:	4a94      	ldr	r2, [pc, #592]	; (8001144 <HAL_GPIO_Init+0x2a8>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d869      	bhi.n	8000fca <HAL_GPIO_Init+0x12e>
 8000ef6:	4a94      	ldr	r2, [pc, #592]	; (8001148 <HAL_GPIO_Init+0x2ac>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d04c      	beq.n	8000f96 <HAL_GPIO_Init+0xfa>
 8000efc:	4a92      	ldr	r2, [pc, #584]	; (8001148 <HAL_GPIO_Init+0x2ac>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d863      	bhi.n	8000fca <HAL_GPIO_Init+0x12e>
 8000f02:	4a92      	ldr	r2, [pc, #584]	; (800114c <HAL_GPIO_Init+0x2b0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d046      	beq.n	8000f96 <HAL_GPIO_Init+0xfa>
 8000f08:	4a90      	ldr	r2, [pc, #576]	; (800114c <HAL_GPIO_Init+0x2b0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d85d      	bhi.n	8000fca <HAL_GPIO_Init+0x12e>
 8000f0e:	2b12      	cmp	r3, #18
 8000f10:	d82a      	bhi.n	8000f68 <HAL_GPIO_Init+0xcc>
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d859      	bhi.n	8000fca <HAL_GPIO_Init+0x12e>
 8000f16:	a201      	add	r2, pc, #4	; (adr r2, 8000f1c <HAL_GPIO_Init+0x80>)
 8000f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f1c:	08000f97 	.word	0x08000f97
 8000f20:	08000f71 	.word	0x08000f71
 8000f24:	08000f83 	.word	0x08000f83
 8000f28:	08000fc5 	.word	0x08000fc5
 8000f2c:	08000fcb 	.word	0x08000fcb
 8000f30:	08000fcb 	.word	0x08000fcb
 8000f34:	08000fcb 	.word	0x08000fcb
 8000f38:	08000fcb 	.word	0x08000fcb
 8000f3c:	08000fcb 	.word	0x08000fcb
 8000f40:	08000fcb 	.word	0x08000fcb
 8000f44:	08000fcb 	.word	0x08000fcb
 8000f48:	08000fcb 	.word	0x08000fcb
 8000f4c:	08000fcb 	.word	0x08000fcb
 8000f50:	08000fcb 	.word	0x08000fcb
 8000f54:	08000fcb 	.word	0x08000fcb
 8000f58:	08000fcb 	.word	0x08000fcb
 8000f5c:	08000fcb 	.word	0x08000fcb
 8000f60:	08000f79 	.word	0x08000f79
 8000f64:	08000f8d 	.word	0x08000f8d
 8000f68:	4a79      	ldr	r2, [pc, #484]	; (8001150 <HAL_GPIO_Init+0x2b4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f6e:	e02c      	b.n	8000fca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	623b      	str	r3, [r7, #32]
          break;
 8000f76:	e029      	b.n	8000fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	3304      	adds	r3, #4
 8000f7e:	623b      	str	r3, [r7, #32]
          break;
 8000f80:	e024      	b.n	8000fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	3308      	adds	r3, #8
 8000f88:	623b      	str	r3, [r7, #32]
          break;
 8000f8a:	e01f      	b.n	8000fcc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	330c      	adds	r3, #12
 8000f92:	623b      	str	r3, [r7, #32]
          break;
 8000f94:	e01a      	b.n	8000fcc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d102      	bne.n	8000fa4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f9e:	2304      	movs	r3, #4
 8000fa0:	623b      	str	r3, [r7, #32]
          break;
 8000fa2:	e013      	b.n	8000fcc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d105      	bne.n	8000fb8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fac:	2308      	movs	r3, #8
 8000fae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	611a      	str	r2, [r3, #16]
          break;
 8000fb6:	e009      	b.n	8000fcc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	69fa      	ldr	r2, [r7, #28]
 8000fc0:	615a      	str	r2, [r3, #20]
          break;
 8000fc2:	e003      	b.n	8000fcc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	623b      	str	r3, [r7, #32]
          break;
 8000fc8:	e000      	b.n	8000fcc <HAL_GPIO_Init+0x130>
          break;
 8000fca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	2bff      	cmp	r3, #255	; 0xff
 8000fd0:	d801      	bhi.n	8000fd6 <HAL_GPIO_Init+0x13a>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	e001      	b.n	8000fda <HAL_GPIO_Init+0x13e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	2bff      	cmp	r3, #255	; 0xff
 8000fe0:	d802      	bhi.n	8000fe8 <HAL_GPIO_Init+0x14c>
 8000fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	e002      	b.n	8000fee <HAL_GPIO_Init+0x152>
 8000fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fea:	3b08      	subs	r3, #8
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	401a      	ands	r2, r3
 8001000:	6a39      	ldr	r1, [r7, #32]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	fa01 f303 	lsl.w	r3, r1, r3
 8001008:	431a      	orrs	r2, r3
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 80b1 	beq.w	800117e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800101c:	4b4d      	ldr	r3, [pc, #308]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	4a4c      	ldr	r2, [pc, #304]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6193      	str	r3, [r2, #24]
 8001028:	4b4a      	ldr	r3, [pc, #296]	; (8001154 <HAL_GPIO_Init+0x2b8>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001034:	4a48      	ldr	r2, [pc, #288]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001040:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	4013      	ands	r3, r2
 8001056:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a40      	ldr	r2, [pc, #256]	; (800115c <HAL_GPIO_Init+0x2c0>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d013      	beq.n	8001088 <HAL_GPIO_Init+0x1ec>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a3f      	ldr	r2, [pc, #252]	; (8001160 <HAL_GPIO_Init+0x2c4>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d00d      	beq.n	8001084 <HAL_GPIO_Init+0x1e8>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a3e      	ldr	r2, [pc, #248]	; (8001164 <HAL_GPIO_Init+0x2c8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d007      	beq.n	8001080 <HAL_GPIO_Init+0x1e4>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a3d      	ldr	r2, [pc, #244]	; (8001168 <HAL_GPIO_Init+0x2cc>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d101      	bne.n	800107c <HAL_GPIO_Init+0x1e0>
 8001078:	2303      	movs	r3, #3
 800107a:	e006      	b.n	800108a <HAL_GPIO_Init+0x1ee>
 800107c:	2304      	movs	r3, #4
 800107e:	e004      	b.n	800108a <HAL_GPIO_Init+0x1ee>
 8001080:	2302      	movs	r3, #2
 8001082:	e002      	b.n	800108a <HAL_GPIO_Init+0x1ee>
 8001084:	2301      	movs	r3, #1
 8001086:	e000      	b.n	800108a <HAL_GPIO_Init+0x1ee>
 8001088:	2300      	movs	r3, #0
 800108a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800108c:	f002 0203 	and.w	r2, r2, #3
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	4093      	lsls	r3, r2
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	4313      	orrs	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800109a:	492f      	ldr	r1, [pc, #188]	; (8001158 <HAL_GPIO_Init+0x2bc>)
 800109c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	3302      	adds	r3, #2
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d006      	beq.n	80010c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010b4:	4b2d      	ldr	r3, [pc, #180]	; (800116c <HAL_GPIO_Init+0x2d0>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	492c      	ldr	r1, [pc, #176]	; (800116c <HAL_GPIO_Init+0x2d0>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	600b      	str	r3, [r1, #0]
 80010c0:	e006      	b.n	80010d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <HAL_GPIO_Init+0x2d0>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	4928      	ldr	r1, [pc, #160]	; (800116c <HAL_GPIO_Init+0x2d0>)
 80010cc:	4013      	ands	r3, r2
 80010ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010dc:	4b23      	ldr	r3, [pc, #140]	; (800116c <HAL_GPIO_Init+0x2d0>)
 80010de:	685a      	ldr	r2, [r3, #4]
 80010e0:	4922      	ldr	r1, [pc, #136]	; (800116c <HAL_GPIO_Init+0x2d0>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	604b      	str	r3, [r1, #4]
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <HAL_GPIO_Init+0x2d0>)
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	491e      	ldr	r1, [pc, #120]	; (800116c <HAL_GPIO_Init+0x2d0>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d006      	beq.n	8001112 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_GPIO_Init+0x2d0>)
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	4918      	ldr	r1, [pc, #96]	; (800116c <HAL_GPIO_Init+0x2d0>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	608b      	str	r3, [r1, #8]
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_GPIO_Init+0x2d0>)
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	43db      	mvns	r3, r3
 800111a:	4914      	ldr	r1, [pc, #80]	; (800116c <HAL_GPIO_Init+0x2d0>)
 800111c:	4013      	ands	r3, r2
 800111e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d021      	beq.n	8001170 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <HAL_GPIO_Init+0x2d0>)
 800112e:	68da      	ldr	r2, [r3, #12]
 8001130:	490e      	ldr	r1, [pc, #56]	; (800116c <HAL_GPIO_Init+0x2d0>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	60cb      	str	r3, [r1, #12]
 8001138:	e021      	b.n	800117e <HAL_GPIO_Init+0x2e2>
 800113a:	bf00      	nop
 800113c:	10320000 	.word	0x10320000
 8001140:	10310000 	.word	0x10310000
 8001144:	10220000 	.word	0x10220000
 8001148:	10210000 	.word	0x10210000
 800114c:	10120000 	.word	0x10120000
 8001150:	10110000 	.word	0x10110000
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000
 800115c:	40010800 	.word	0x40010800
 8001160:	40010c00 	.word	0x40010c00
 8001164:	40011000 	.word	0x40011000
 8001168:	40011400 	.word	0x40011400
 800116c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_GPIO_Init+0x304>)
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	43db      	mvns	r3, r3
 8001178:	4909      	ldr	r1, [pc, #36]	; (80011a0 <HAL_GPIO_Init+0x304>)
 800117a:	4013      	ands	r3, r2
 800117c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	fa22 f303 	lsr.w	r3, r2, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	f47f ae8e 	bne.w	8000eb0 <HAL_GPIO_Init+0x14>
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	372c      	adds	r7, #44	; 0x2c
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr
 80011a0:	40010400 	.word	0x40010400

080011a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	807b      	strh	r3, [r7, #2]
 80011b0:	4613      	mov	r3, r2
 80011b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b4:	787b      	ldrb	r3, [r7, #1]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011c0:	e003      	b.n	80011ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011c2:	887b      	ldrh	r3, [r7, #2]
 80011c4:	041a      	lsls	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	611a      	str	r2, [r3, #16]
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr

080011d4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4013      	ands	r3, r2
 80011ec:	041a      	lsls	r2, r3, #16
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43d9      	mvns	r1, r3
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	400b      	ands	r3, r1
 80011f6:	431a      	orrs	r2, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	611a      	str	r2, [r3, #16]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr
	...

08001208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d101      	bne.n	800121a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e272      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	f000 8087 	beq.w	8001336 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001228:	4b92      	ldr	r3, [pc, #584]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 030c 	and.w	r3, r3, #12
 8001230:	2b04      	cmp	r3, #4
 8001232:	d00c      	beq.n	800124e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001234:	4b8f      	ldr	r3, [pc, #572]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 030c 	and.w	r3, r3, #12
 800123c:	2b08      	cmp	r3, #8
 800123e:	d112      	bne.n	8001266 <HAL_RCC_OscConfig+0x5e>
 8001240:	4b8c      	ldr	r3, [pc, #560]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124c:	d10b      	bne.n	8001266 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800124e:	4b89      	ldr	r3, [pc, #548]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d06c      	beq.n	8001334 <HAL_RCC_OscConfig+0x12c>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d168      	bne.n	8001334 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e24c      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x76>
 8001270:	4b80      	ldr	r3, [pc, #512]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a7f      	ldr	r2, [pc, #508]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	e02e      	b.n	80012dc <HAL_RCC_OscConfig+0xd4>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d10c      	bne.n	80012a0 <HAL_RCC_OscConfig+0x98>
 8001286:	4b7b      	ldr	r3, [pc, #492]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a7a      	ldr	r2, [pc, #488]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 800128c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	4b78      	ldr	r3, [pc, #480]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a77      	ldr	r2, [pc, #476]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001298:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e01d      	b.n	80012dc <HAL_RCC_OscConfig+0xd4>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a8:	d10c      	bne.n	80012c4 <HAL_RCC_OscConfig+0xbc>
 80012aa:	4b72      	ldr	r3, [pc, #456]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a71      	ldr	r2, [pc, #452]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	4b6f      	ldr	r3, [pc, #444]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6e      	ldr	r2, [pc, #440]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	e00b      	b.n	80012dc <HAL_RCC_OscConfig+0xd4>
 80012c4:	4b6b      	ldr	r3, [pc, #428]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a6a      	ldr	r2, [pc, #424]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4b68      	ldr	r3, [pc, #416]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a67      	ldr	r2, [pc, #412]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d013      	beq.n	800130c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fcc8 	bl	8000c78 <HAL_GetTick>
 80012e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ec:	f7ff fcc4 	bl	8000c78 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b64      	cmp	r3, #100	; 0x64
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e200      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f0      	beq.n	80012ec <HAL_RCC_OscConfig+0xe4>
 800130a:	e014      	b.n	8001336 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130c:	f7ff fcb4 	bl	8000c78 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fcb0 	bl	8000c78 <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	; 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e1ec      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	4b53      	ldr	r3, [pc, #332]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x10c>
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d063      	beq.n	800140a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001342:	4b4c      	ldr	r3, [pc, #304]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00b      	beq.n	8001366 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800134e:	4b49      	ldr	r3, [pc, #292]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b08      	cmp	r3, #8
 8001358:	d11c      	bne.n	8001394 <HAL_RCC_OscConfig+0x18c>
 800135a:	4b46      	ldr	r3, [pc, #280]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d116      	bne.n	8001394 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	4b43      	ldr	r3, [pc, #268]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_OscConfig+0x176>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e1c0      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137e:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	695b      	ldr	r3, [r3, #20]
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4939      	ldr	r1, [pc, #228]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001392:	e03a      	b.n	800140a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d020      	beq.n	80013de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139c:	4b36      	ldr	r3, [pc, #216]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 800139e:	2201      	movs	r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a2:	f7ff fc69 	bl	8000c78 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013aa:	f7ff fc65 	bl	8000c78 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1a1      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c8:	4b2a      	ldr	r3, [pc, #168]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695b      	ldr	r3, [r3, #20]
 80013d4:	00db      	lsls	r3, r3, #3
 80013d6:	4927      	ldr	r1, [pc, #156]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
 80013dc:	e015      	b.n	800140a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013de:	4b26      	ldr	r3, [pc, #152]	; (8001478 <HAL_RCC_OscConfig+0x270>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fc48 	bl	8000c78 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff fc44 	bl	8000c78 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e180      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	2b00      	cmp	r3, #0
 8001414:	d03a      	beq.n	800148c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d019      	beq.n	8001452 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_RCC_OscConfig+0x274>)
 8001420:	2201      	movs	r2, #1
 8001422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001424:	f7ff fc28 	bl	8000c78 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff fc24 	bl	8000c78 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e160      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_RCC_OscConfig+0x26c>)
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0f0      	beq.n	800142c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800144a:	2001      	movs	r0, #1
 800144c:	f000 faa6 	bl	800199c <RCC_Delay>
 8001450:	e01c      	b.n	800148c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001452:	4b0a      	ldr	r3, [pc, #40]	; (800147c <HAL_RCC_OscConfig+0x274>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001458:	f7ff fc0e 	bl	8000c78 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800145e:	e00f      	b.n	8001480 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001460:	f7ff fc0a 	bl	8000c78 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d908      	bls.n	8001480 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e146      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000
 8001478:	42420000 	.word	0x42420000
 800147c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b92      	ldr	r3, [pc, #584]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1e9      	bne.n	8001460 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 80a6 	beq.w	80015e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b8b      	ldr	r3, [pc, #556]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	69db      	ldr	r3, [r3, #28]
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10d      	bne.n	80014c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	4b88      	ldr	r3, [pc, #544]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a87      	ldr	r2, [pc, #540]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80014b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b85      	ldr	r3, [pc, #532]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c2:	2301      	movs	r3, #1
 80014c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014c6:	4b82      	ldr	r3, [pc, #520]	; (80016d0 <HAL_RCC_OscConfig+0x4c8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d118      	bne.n	8001504 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d2:	4b7f      	ldr	r3, [pc, #508]	; (80016d0 <HAL_RCC_OscConfig+0x4c8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a7e      	ldr	r2, [pc, #504]	; (80016d0 <HAL_RCC_OscConfig+0x4c8>)
 80014d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014de:	f7ff fbcb 	bl	8000c78 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e6:	f7ff fbc7 	bl	8000c78 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b64      	cmp	r3, #100	; 0x64
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e103      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	4b75      	ldr	r3, [pc, #468]	; (80016d0 <HAL_RCC_OscConfig+0x4c8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d106      	bne.n	800151a <HAL_RCC_OscConfig+0x312>
 800150c:	4b6f      	ldr	r3, [pc, #444]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	4a6e      	ldr	r2, [pc, #440]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6213      	str	r3, [r2, #32]
 8001518:	e02d      	b.n	8001576 <HAL_RCC_OscConfig+0x36e>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10c      	bne.n	800153c <HAL_RCC_OscConfig+0x334>
 8001522:	4b6a      	ldr	r3, [pc, #424]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4a69      	ldr	r2, [pc, #420]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	6213      	str	r3, [r2, #32]
 800152e:	4b67      	ldr	r3, [pc, #412]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	4a66      	ldr	r2, [pc, #408]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001534:	f023 0304 	bic.w	r3, r3, #4
 8001538:	6213      	str	r3, [r2, #32]
 800153a:	e01c      	b.n	8001576 <HAL_RCC_OscConfig+0x36e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d10c      	bne.n	800155e <HAL_RCC_OscConfig+0x356>
 8001544:	4b61      	ldr	r3, [pc, #388]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001546:	6a1b      	ldr	r3, [r3, #32]
 8001548:	4a60      	ldr	r2, [pc, #384]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6213      	str	r3, [r2, #32]
 8001550:	4b5e      	ldr	r3, [pc, #376]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001552:	6a1b      	ldr	r3, [r3, #32]
 8001554:	4a5d      	ldr	r2, [pc, #372]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6213      	str	r3, [r2, #32]
 800155c:	e00b      	b.n	8001576 <HAL_RCC_OscConfig+0x36e>
 800155e:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	4a5a      	ldr	r2, [pc, #360]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	6213      	str	r3, [r2, #32]
 800156a:	4b58      	ldr	r3, [pc, #352]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800156c:	6a1b      	ldr	r3, [r3, #32]
 800156e:	4a57      	ldr	r2, [pc, #348]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d015      	beq.n	80015aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff fb7b 	bl	8000c78 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001584:	e00a      	b.n	800159c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001586:	f7ff fb77 	bl	8000c78 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	f241 3288 	movw	r2, #5000	; 0x1388
 8001594:	4293      	cmp	r3, r2
 8001596:	d901      	bls.n	800159c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0b1      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800159c:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d0ee      	beq.n	8001586 <HAL_RCC_OscConfig+0x37e>
 80015a8:	e014      	b.n	80015d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015aa:	f7ff fb65 	bl	8000c78 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b0:	e00a      	b.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015b2:	f7ff fb61 	bl	8000c78 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d901      	bls.n	80015c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e09b      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c8:	4b40      	ldr	r3, [pc, #256]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1ee      	bne.n	80015b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015d4:	7dfb      	ldrb	r3, [r7, #23]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d105      	bne.n	80015e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015da:	4b3c      	ldr	r3, [pc, #240]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a3b      	ldr	r2, [pc, #236]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80015e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f000 8087 	beq.w	80016fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f003 030c 	and.w	r3, r3, #12
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d061      	beq.n	80016c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69db      	ldr	r3, [r3, #28]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d146      	bne.n	8001692 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fb35 	bl	8000c78 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff fb31 	bl	8000c78 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e06d      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1f0      	bne.n	8001612 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001638:	d108      	bne.n	800164c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	4921      	ldr	r1, [pc, #132]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800164c:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a19      	ldr	r1, [r3, #32]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165c:	430b      	orrs	r3, r1
 800165e:	491b      	ldr	r1, [pc, #108]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff fb05 	bl	8000c78 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001672:	f7ff fb01 	bl	8000c78 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e03d      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x46a>
 8001690:	e035      	b.n	80016fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <HAL_RCC_OscConfig+0x4cc>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff faee 	bl	8000c78 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff faea 	bl	8000c78 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e026      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x498>
 80016be:	e01e      	b.n	80016fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d107      	bne.n	80016d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e019      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40007000 	.word	0x40007000
 80016d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x500>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d106      	bne.n	80016fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d001      	beq.n	80016fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000

0800170c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0d0      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001720:	4b6a      	ldr	r3, [pc, #424]	; (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0307 	and.w	r3, r3, #7
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d910      	bls.n	8001750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b67      	ldr	r3, [pc, #412]	; (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 0207 	bic.w	r2, r3, #7
 8001736:	4965      	ldr	r1, [pc, #404]	; (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b63      	ldr	r3, [pc, #396]	; (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0b8      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001768:	4b59      	ldr	r3, [pc, #356]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800176e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001772:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	4a52      	ldr	r2, [pc, #328]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800178a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	494d      	ldr	r1, [pc, #308]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800179a:	4313      	orrs	r3, r2
 800179c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d040      	beq.n	800182c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d115      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e07f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e073      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e06b      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ea:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f023 0203 	bic.w	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4936      	ldr	r1, [pc, #216]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017fc:	f7ff fa3c 	bl	8000c78 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	e00a      	b.n	800181a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001804:	f7ff fa38 	bl	8000c78 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e053      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 020c 	and.w	r2, r3, #12
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	429a      	cmp	r2, r3
 800182a:	d1eb      	bne.n	8001804 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d210      	bcs.n	800185c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 0207 	bic.w	r2, r3, #7
 8001842:	4922      	ldr	r1, [pc, #136]	; (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e032      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4916      	ldr	r1, [pc, #88]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	490e      	ldr	r1, [pc, #56]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189a:	f000 f821 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	490a      	ldr	r1, [pc, #40]	; (80018d4 <HAL_RCC_ClockConfig+0x1c8>)
 80018ac:	5ccb      	ldrb	r3, [r1, r3]
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1cc>)
 80018b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1d0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f99a 	bl	8000bf4 <HAL_InitTick>

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40022000 	.word	0x40022000
 80018d0:	40021000 	.word	0x40021000
 80018d4:	08002b30 	.word	0x08002b30
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	b490      	push	{r4, r7}
 80018e2:	b08a      	sub	sp, #40	; 0x28
 80018e4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <HAL_RCC_GetSysClockFreq+0xac>)
 80018e8:	1d3c      	adds	r4, r7, #4
 80018ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80018f0:	f240 2301 	movw	r3, #513	; 0x201
 80018f4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	2300      	movs	r3, #0
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_RCC_GetSysClockFreq+0xb0>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f003 030c 	and.w	r3, r3, #12
 8001916:	2b04      	cmp	r3, #4
 8001918:	d002      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x40>
 800191a:	2b08      	cmp	r3, #8
 800191c:	d003      	beq.n	8001926 <HAL_RCC_GetSysClockFreq+0x46>
 800191e:	e02b      	b.n	8001978 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001920:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001922:	623b      	str	r3, [r7, #32]
      break;
 8001924:	e02b      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	0c9b      	lsrs	r3, r3, #18
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3328      	adds	r3, #40	; 0x28
 8001930:	443b      	add	r3, r7
 8001932:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001936:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d012      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	0c5b      	lsrs	r3, r3, #17
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	3328      	adds	r3, #40	; 0x28
 800194e:	443b      	add	r3, r7
 8001950:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001954:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	4a0e      	ldr	r2, [pc, #56]	; (8001994 <HAL_RCC_GetSysClockFreq+0xb4>)
 800195a:	fb03 f202 	mul.w	r2, r3, r2
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	fbb2 f3f3 	udiv	r3, r2, r3
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
 8001966:	e004      	b.n	8001972 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	4a0b      	ldr	r2, [pc, #44]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800196c:	fb02 f303 	mul.w	r3, r2, r3
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	623b      	str	r3, [r7, #32]
      break;
 8001976:	e002      	b.n	800197e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_GetSysClockFreq+0xb4>)
 800197a:	623b      	str	r3, [r7, #32]
      break;
 800197c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800197e:	6a3b      	ldr	r3, [r7, #32]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3728      	adds	r7, #40	; 0x28
 8001984:	46bd      	mov	sp, r7
 8001986:	bc90      	pop	{r4, r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	08002b20 	.word	0x08002b20
 8001990:	40021000 	.word	0x40021000
 8001994:	007a1200 	.word	0x007a1200
 8001998:	003d0900 	.word	0x003d0900

0800199c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <RCC_Delay+0x34>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a0a      	ldr	r2, [pc, #40]	; (80019d4 <RCC_Delay+0x38>)
 80019aa:	fba2 2303 	umull	r2, r3, r2, r3
 80019ae:	0a5b      	lsrs	r3, r3, #9
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	fb02 f303 	mul.w	r3, r2, r3
 80019b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80019b8:	bf00      	nop
  }
  while (Delay --);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	1e5a      	subs	r2, r3, #1
 80019be:	60fa      	str	r2, [r7, #12]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1f9      	bne.n	80019b8 <RCC_Delay+0x1c>
}
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	20000000 	.word	0x20000000
 80019d4:	10624dd3 	.word	0x10624dd3

080019d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e041      	b.n	8001a6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d106      	bne.n	8001a04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7fe ff64 	bl	80008cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2202      	movs	r2, #2
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3304      	adds	r3, #4
 8001a14:	4619      	mov	r1, r3
 8001a16:	4610      	mov	r0, r2
 8001a18:	f000 fb74 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2201      	movs	r2, #1
 8001a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_TIM_PWM_Start+0x24>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	bf14      	ite	ne
 8001a94:	2301      	movne	r3, #1
 8001a96:	2300      	moveq	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	e022      	b.n	8001ae2 <HAL_TIM_PWM_Start+0x6a>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d109      	bne.n	8001ab6 <HAL_TIM_PWM_Start+0x3e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	bf14      	ite	ne
 8001aae:	2301      	movne	r3, #1
 8001ab0:	2300      	moveq	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	e015      	b.n	8001ae2 <HAL_TIM_PWM_Start+0x6a>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d109      	bne.n	8001ad0 <HAL_TIM_PWM_Start+0x58>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	bf14      	ite	ne
 8001ac8:	2301      	movne	r3, #1
 8001aca:	2300      	moveq	r3, #0
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	e008      	b.n	8001ae2 <HAL_TIM_PWM_Start+0x6a>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	bf14      	ite	ne
 8001adc:	2301      	movne	r3, #1
 8001ade:	2300      	moveq	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e05e      	b.n	8001ba8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d104      	bne.n	8001afa <HAL_TIM_PWM_Start+0x82>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001af8:	e013      	b.n	8001b22 <HAL_TIM_PWM_Start+0xaa>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d104      	bne.n	8001b0a <HAL_TIM_PWM_Start+0x92>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b08:	e00b      	b.n	8001b22 <HAL_TIM_PWM_Start+0xaa>
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d104      	bne.n	8001b1a <HAL_TIM_PWM_Start+0xa2>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b18:	e003      	b.n	8001b22 <HAL_TIM_PWM_Start+0xaa>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 feeb 	bl	8002906 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1e      	ldr	r2, [pc, #120]	; (8001bb0 <HAL_TIM_PWM_Start+0x138>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d107      	bne.n	8001b4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a18      	ldr	r2, [pc, #96]	; (8001bb0 <HAL_TIM_PWM_Start+0x138>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00e      	beq.n	8001b72 <HAL_TIM_PWM_Start+0xfa>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b5c:	d009      	beq.n	8001b72 <HAL_TIM_PWM_Start+0xfa>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <HAL_TIM_PWM_Start+0x13c>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d004      	beq.n	8001b72 <HAL_TIM_PWM_Start+0xfa>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <HAL_TIM_PWM_Start+0x140>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d111      	bne.n	8001b96 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b06      	cmp	r3, #6
 8001b82:	d010      	beq.n	8001ba6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f042 0201 	orr.w	r2, r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b94:	e007      	b.n	8001ba6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f042 0201 	orr.w	r2, r2, #1
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3710      	adds	r7, #16
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40012c00 	.word	0x40012c00
 8001bb4:	40000400 	.word	0x40000400
 8001bb8:	40000800 	.word	0x40000800

08001bbc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e041      	b.n	8001c52 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fe90 	bl	8000908 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	f000 fa82 	bl	8002104 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d104      	bne.n	8001c76 <HAL_TIM_IC_Start+0x1a>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	e013      	b.n	8001c9e <HAL_TIM_IC_Start+0x42>
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	d104      	bne.n	8001c86 <HAL_TIM_IC_Start+0x2a>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	e00b      	b.n	8001c9e <HAL_TIM_IC_Start+0x42>
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d104      	bne.n	8001c96 <HAL_TIM_IC_Start+0x3a>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	e003      	b.n	8001c9e <HAL_TIM_IC_Start+0x42>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d104      	bne.n	8001cb0 <HAL_TIM_IC_Start+0x54>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	e013      	b.n	8001cd8 <HAL_TIM_IC_Start+0x7c>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	d104      	bne.n	8001cc0 <HAL_TIM_IC_Start+0x64>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	e00b      	b.n	8001cd8 <HAL_TIM_IC_Start+0x7c>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b08      	cmp	r3, #8
 8001cc4:	d104      	bne.n	8001cd0 <HAL_TIM_IC_Start+0x74>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	e003      	b.n	8001cd8 <HAL_TIM_IC_Start+0x7c>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001cda:	7bfb      	ldrb	r3, [r7, #15]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d102      	bne.n	8001ce6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001ce0:	7bbb      	ldrb	r3, [r7, #14]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d001      	beq.n	8001cea <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e06d      	b.n	8001dc6 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d104      	bne.n	8001cfa <HAL_TIM_IC_Start+0x9e>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cf8:	e013      	b.n	8001d22 <HAL_TIM_IC_Start+0xc6>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d104      	bne.n	8001d0a <HAL_TIM_IC_Start+0xae>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d08:	e00b      	b.n	8001d22 <HAL_TIM_IC_Start+0xc6>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d104      	bne.n	8001d1a <HAL_TIM_IC_Start+0xbe>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d18:	e003      	b.n	8001d22 <HAL_TIM_IC_Start+0xc6>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d104      	bne.n	8001d32 <HAL_TIM_IC_Start+0xd6>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d30:	e013      	b.n	8001d5a <HAL_TIM_IC_Start+0xfe>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b04      	cmp	r3, #4
 8001d36:	d104      	bne.n	8001d42 <HAL_TIM_IC_Start+0xe6>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d40:	e00b      	b.n	8001d5a <HAL_TIM_IC_Start+0xfe>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d104      	bne.n	8001d52 <HAL_TIM_IC_Start+0xf6>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d50:	e003      	b.n	8001d5a <HAL_TIM_IC_Start+0xfe>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2202      	movs	r2, #2
 8001d56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	6839      	ldr	r1, [r7, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fdcf 	bl	8002906 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <HAL_TIM_IC_Start+0x174>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d00e      	beq.n	8001d90 <HAL_TIM_IC_Start+0x134>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7a:	d009      	beq.n	8001d90 <HAL_TIM_IC_Start+0x134>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <HAL_TIM_IC_Start+0x178>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d004      	beq.n	8001d90 <HAL_TIM_IC_Start+0x134>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <HAL_TIM_IC_Start+0x17c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d111      	bne.n	8001db4 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2b06      	cmp	r3, #6
 8001da0:	d010      	beq.n	8001dc4 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f042 0201 	orr.w	r2, r2, #1
 8001db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db2:	e007      	b.n	8001dc4 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f042 0201 	orr.w	r2, r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40000800 	.word	0x40000800

08001ddc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e082      	b.n	8001efc <HAL_TIM_IC_ConfigChannel+0x120>
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d11b      	bne.n	8001e3c <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6818      	ldr	r0, [r3, #0]
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	6819      	ldr	r1, [r3, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f000 fbee 	bl	80025f4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699a      	ldr	r2, [r3, #24]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 020c 	bic.w	r2, r2, #12
 8001e26:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6999      	ldr	r1, [r3, #24]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	619a      	str	r2, [r3, #24]
 8001e3a:	e05a      	b.n	8001ef2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	d11c      	bne.n	8001e7c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	6819      	ldr	r1, [r3, #0]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f000 fc57 	bl	8002704 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699a      	ldr	r2, [r3, #24]
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e64:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6999      	ldr	r1, [r3, #24]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	021a      	lsls	r2, r3, #8
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	619a      	str	r2, [r3, #24]
 8001e7a:	e03a      	b.n	8001ef2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d11b      	bne.n	8001eba <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	6818      	ldr	r0, [r3, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	6819      	ldr	r1, [r3, #0]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	f000 fca2 	bl	80027da <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69da      	ldr	r2, [r3, #28]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 020c 	bic.w	r2, r2, #12
 8001ea4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69d9      	ldr	r1, [r3, #28]
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	61da      	str	r2, [r3, #28]
 8001eb8:	e01b      	b.n	8001ef2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	6819      	ldr	r1, [r3, #0]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f000 fcc1 	bl	8002850 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001edc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69d9      	ldr	r1, [r3, #28]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	021a      	lsls	r2, r3, #8
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e0ac      	b.n	8002078 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b0c      	cmp	r3, #12
 8001f2a:	f200 809f 	bhi.w	800206c <HAL_TIM_PWM_ConfigChannel+0x168>
 8001f2e:	a201      	add	r2, pc, #4	; (adr r2, 8001f34 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f34:	08001f69 	.word	0x08001f69
 8001f38:	0800206d 	.word	0x0800206d
 8001f3c:	0800206d 	.word	0x0800206d
 8001f40:	0800206d 	.word	0x0800206d
 8001f44:	08001fa9 	.word	0x08001fa9
 8001f48:	0800206d 	.word	0x0800206d
 8001f4c:	0800206d 	.word	0x0800206d
 8001f50:	0800206d 	.word	0x0800206d
 8001f54:	08001feb 	.word	0x08001feb
 8001f58:	0800206d 	.word	0x0800206d
 8001f5c:	0800206d 	.word	0x0800206d
 8001f60:	0800206d 	.word	0x0800206d
 8001f64:	0800202b 	.word	0x0800202b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f92a 	bl	80021c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	699a      	ldr	r2, [r3, #24]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0208 	orr.w	r2, r2, #8
 8001f82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	699a      	ldr	r2, [r3, #24]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f022 0204 	bic.w	r2, r2, #4
 8001f92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6999      	ldr	r1, [r3, #24]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	619a      	str	r2, [r3, #24]
      break;
 8001fa6:	e062      	b.n	800206e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 f970 	bl	8002294 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	699a      	ldr	r2, [r3, #24]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699a      	ldr	r2, [r3, #24]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6999      	ldr	r1, [r3, #24]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	021a      	lsls	r2, r3, #8
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	619a      	str	r2, [r3, #24]
      break;
 8001fe8:	e041      	b.n	800206e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68b9      	ldr	r1, [r7, #8]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f000 f9b9 	bl	8002368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	69da      	ldr	r2, [r3, #28]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0208 	orr.w	r2, r2, #8
 8002004:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0204 	bic.w	r2, r2, #4
 8002014:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69d9      	ldr	r1, [r3, #28]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	61da      	str	r2, [r3, #28]
      break;
 8002028:	e021      	b.n	800206e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68b9      	ldr	r1, [r7, #8]
 8002030:	4618      	mov	r0, r3
 8002032:	f000 fa03 	bl	800243c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002044:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	69da      	ldr	r2, [r3, #28]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002054:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	69d9      	ldr	r1, [r3, #28]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	021a      	lsls	r2, r3, #8
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	61da      	str	r2, [r3, #28]
      break;
 800206a:	e000      	b.n	800206e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800206c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002094:	2302      	movs	r3, #2
 8002096:	e031      	b.n	80020fc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2202      	movs	r2, #2
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80020a8:	6839      	ldr	r1, [r7, #0]
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fa14 	bl	80024d8 <TIM_SlaveTimer_SetConfig>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d009      	beq.n	80020ca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e018      	b.n	80020fc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020d8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68da      	ldr	r2, [r3, #12]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80020e8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a29      	ldr	r2, [pc, #164]	; (80021bc <TIM_Base_SetConfig+0xb8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00b      	beq.n	8002134 <TIM_Base_SetConfig+0x30>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002122:	d007      	beq.n	8002134 <TIM_Base_SetConfig+0x30>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <TIM_Base_SetConfig+0xbc>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d003      	beq.n	8002134 <TIM_Base_SetConfig+0x30>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <TIM_Base_SetConfig+0xc0>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d108      	bne.n	8002146 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800213a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	4313      	orrs	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a1c      	ldr	r2, [pc, #112]	; (80021bc <TIM_Base_SetConfig+0xb8>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d00b      	beq.n	8002166 <TIM_Base_SetConfig+0x62>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002154:	d007      	beq.n	8002166 <TIM_Base_SetConfig+0x62>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <TIM_Base_SetConfig+0xbc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d003      	beq.n	8002166 <TIM_Base_SetConfig+0x62>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a18      	ldr	r2, [pc, #96]	; (80021c4 <TIM_Base_SetConfig+0xc0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d108      	bne.n	8002178 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800216c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68fa      	ldr	r2, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	689a      	ldr	r2, [r3, #8]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a07      	ldr	r2, [pc, #28]	; (80021bc <TIM_Base_SetConfig+0xb8>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d103      	bne.n	80021ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	615a      	str	r2, [r3, #20]
}
 80021b2:	bf00      	nop
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40000400 	.word	0x40000400
 80021c4:	40000800 	.word	0x40000800

080021c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a1b      	ldr	r3, [r3, #32]
 80021d6:	f023 0201 	bic.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0303 	bic.w	r3, r3, #3
 80021fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68fa      	ldr	r2, [r7, #12]
 8002206:	4313      	orrs	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f023 0302 	bic.w	r3, r3, #2
 8002210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	4313      	orrs	r3, r2
 800221a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a1c      	ldr	r2, [pc, #112]	; (8002290 <TIM_OC1_SetConfig+0xc8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d10c      	bne.n	800223e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f023 0308 	bic.w	r3, r3, #8
 800222a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	f023 0304 	bic.w	r3, r3, #4
 800223c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a13      	ldr	r2, [pc, #76]	; (8002290 <TIM_OC1_SetConfig+0xc8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d111      	bne.n	800226a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800224c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002254:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	4313      	orrs	r3, r2
 800225e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	693a      	ldr	r2, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	621a      	str	r2, [r3, #32]
}
 8002284:	bf00      	nop
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40012c00 	.word	0x40012c00

08002294 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	f023 0210 	bic.w	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a1b      	ldr	r3, [r3, #32]
 80022ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	021b      	lsls	r3, r3, #8
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f023 0320 	bic.w	r3, r3, #32
 80022de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a1d      	ldr	r2, [pc, #116]	; (8002364 <TIM_OC2_SetConfig+0xd0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d10d      	bne.n	8002310 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	4313      	orrs	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800230e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a14      	ldr	r2, [pc, #80]	; (8002364 <TIM_OC2_SetConfig+0xd0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d113      	bne.n	8002340 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800231e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	621a      	str	r2, [r3, #32]
}
 800235a:	bf00      	nop
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	40012c00 	.word	0x40012c00

08002368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002368:	b480      	push	{r7}
 800236a:	b087      	sub	sp, #28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f023 0303 	bic.w	r3, r3, #3
 800239e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <TIM_OC3_SetConfig+0xd0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d10d      	bne.n	80023e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <TIM_OC3_SetConfig+0xd0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d113      	bne.n	8002412 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	697a      	ldr	r2, [r7, #20]
 800242a:	621a      	str	r2, [r3, #32]
}
 800242c:	bf00      	nop
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40012c00 	.word	0x40012c00

0800243c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800246a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4313      	orrs	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	031b      	lsls	r3, r3, #12
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <TIM_OC4_SetConfig+0x98>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d109      	bne.n	80024b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	019b      	lsls	r3, r3, #6
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	621a      	str	r2, [r3, #32]
}
 80024ca:	bf00      	nop
 80024cc:	371c      	adds	r7, #28
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	40012c00 	.word	0x40012c00

080024d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0307 	bic.w	r3, r3, #7
 8002502:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b70      	cmp	r3, #112	; 0x70
 800251c:	d01a      	beq.n	8002554 <TIM_SlaveTimer_SetConfig+0x7c>
 800251e:	2b70      	cmp	r3, #112	; 0x70
 8002520:	d860      	bhi.n	80025e4 <TIM_SlaveTimer_SetConfig+0x10c>
 8002522:	2b60      	cmp	r3, #96	; 0x60
 8002524:	d054      	beq.n	80025d0 <TIM_SlaveTimer_SetConfig+0xf8>
 8002526:	2b60      	cmp	r3, #96	; 0x60
 8002528:	d85c      	bhi.n	80025e4 <TIM_SlaveTimer_SetConfig+0x10c>
 800252a:	2b50      	cmp	r3, #80	; 0x50
 800252c:	d046      	beq.n	80025bc <TIM_SlaveTimer_SetConfig+0xe4>
 800252e:	2b50      	cmp	r3, #80	; 0x50
 8002530:	d858      	bhi.n	80025e4 <TIM_SlaveTimer_SetConfig+0x10c>
 8002532:	2b40      	cmp	r3, #64	; 0x40
 8002534:	d019      	beq.n	800256a <TIM_SlaveTimer_SetConfig+0x92>
 8002536:	2b40      	cmp	r3, #64	; 0x40
 8002538:	d854      	bhi.n	80025e4 <TIM_SlaveTimer_SetConfig+0x10c>
 800253a:	2b30      	cmp	r3, #48	; 0x30
 800253c:	d054      	beq.n	80025e8 <TIM_SlaveTimer_SetConfig+0x110>
 800253e:	2b30      	cmp	r3, #48	; 0x30
 8002540:	d850      	bhi.n	80025e4 <TIM_SlaveTimer_SetConfig+0x10c>
 8002542:	2b20      	cmp	r3, #32
 8002544:	d050      	beq.n	80025e8 <TIM_SlaveTimer_SetConfig+0x110>
 8002546:	2b20      	cmp	r3, #32
 8002548:	d84c      	bhi.n	80025e4 <TIM_SlaveTimer_SetConfig+0x10c>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d04c      	beq.n	80025e8 <TIM_SlaveTimer_SetConfig+0x110>
 800254e:	2b10      	cmp	r3, #16
 8002550:	d04a      	beq.n	80025e8 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8002552:	e047      	b.n	80025e4 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6818      	ldr	r0, [r3, #0]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	68d9      	ldr	r1, [r3, #12]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f000 f9b0 	bl	80028c8 <TIM_ETR_SetConfig>
      break;
 8002568:	e03f      	b.n	80025ea <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2b05      	cmp	r3, #5
 8002570:	d101      	bne.n	8002576 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e03a      	b.n	80025ec <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a1a      	ldr	r2, [r3, #32]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800259c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	621a      	str	r2, [r3, #32]
      break;
 80025ba:	e016      	b.n	80025ea <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6818      	ldr	r0, [r3, #0]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6899      	ldr	r1, [r3, #8]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	461a      	mov	r2, r3
 80025ca:	f000 f86d 	bl	80026a8 <TIM_TI1_ConfigInputStage>
      break;
 80025ce:	e00c      	b.n	80025ea <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	6899      	ldr	r1, [r3, #8]
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	461a      	mov	r2, r3
 80025de:	f000 f8cd 	bl	800277c <TIM_TI2_ConfigInputStage>
      break;
 80025e2:	e002      	b.n	80025ea <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80025e4:	bf00      	nop
 80025e6:	e000      	b.n	80025ea <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80025e8:	bf00      	nop
  }
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3718      	adds	r7, #24
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	f023 0201 	bic.w	r2, r3, #1
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4a1f      	ldr	r2, [pc, #124]	; (800269c <TIM_TI1_SetConfig+0xa8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00b      	beq.n	800263a <TIM_TI1_SetConfig+0x46>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002628:	d007      	beq.n	800263a <TIM_TI1_SetConfig+0x46>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <TIM_TI1_SetConfig+0xac>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d003      	beq.n	800263a <TIM_TI1_SetConfig+0x46>
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <TIM_TI1_SetConfig+0xb0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d101      	bne.n	800263e <TIM_TI1_SetConfig+0x4a>
 800263a:	2301      	movs	r3, #1
 800263c:	e000      	b.n	8002640 <TIM_TI1_SetConfig+0x4c>
 800263e:	2300      	movs	r3, #0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d008      	beq.n	8002656 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f023 0303 	bic.w	r3, r3, #3
 800264a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800264c:	697a      	ldr	r2, [r7, #20]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4313      	orrs	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	e003      	b.n	800265e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002664:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	b2db      	uxtb	r3, r3
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f023 030a 	bic.w	r3, r3, #10
 8002678:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f003 030a 	and.w	r3, r3, #10
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	693a      	ldr	r2, [r7, #16]
 8002690:	621a      	str	r2, [r3, #32]
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800

080026a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b087      	sub	sp, #28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	f023 0201 	bic.w	r2, r3, #1
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	4313      	orrs	r3, r2
 80026dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	f023 030a 	bic.w	r3, r3, #10
 80026e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	697a      	ldr	r2, [r7, #20]
 80026f8:	621a      	str	r2, [r3, #32]
}
 80026fa:	bf00      	nop
 80026fc:	371c      	adds	r7, #28
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
 8002710:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f023 0210 	bic.w	r2, r3, #16
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002730:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002742:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	031b      	lsls	r3, r3, #12
 8002748:	b29b      	uxth	r3, r3
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002756:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002760:	693a      	ldr	r2, [r7, #16]
 8002762:	4313      	orrs	r3, r2
 8002764:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	621a      	str	r2, [r3, #32]
}
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr

0800277c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f023 0210 	bic.w	r2, r3, #16
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	031b      	lsls	r3, r3, #12
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	011b      	lsls	r3, r3, #4
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	693a      	ldr	r2, [r7, #16]
 80027ce:	621a      	str	r2, [r3, #32]
}
 80027d0:	bf00      	nop
 80027d2:	371c      	adds	r7, #28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bc80      	pop	{r7}
 80027d8:	4770      	bx	lr

080027da <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80027da:	b480      	push	{r7}
 80027dc:	b087      	sub	sp, #28
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
 80027e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	f023 0303 	bic.w	r3, r3, #3
 8002806:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4313      	orrs	r3, r2
 800280e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002816:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	b2db      	uxtb	r3, r3
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	4313      	orrs	r3, r2
 8002822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800282a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	021b      	lsls	r3, r3, #8
 8002830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002834:	693a      	ldr	r2, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	621a      	str	r2, [r3, #32]
}
 8002846:	bf00      	nop
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002850:	b480      	push	{r7}
 8002852:	b087      	sub	sp, #28
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800288e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	031b      	lsls	r3, r3, #12
 8002894:	b29b      	uxth	r3, r3
 8002896:	697a      	ldr	r2, [r7, #20]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	031b      	lsls	r3, r3, #12
 80028a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	621a      	str	r2, [r3, #32]
}
 80028be:	bf00      	nop
 80028c0:	371c      	adds	r7, #28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr

080028c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	021a      	lsls	r2, r3, #8
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	609a      	str	r2, [r3, #8]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002906:	b480      	push	{r7}
 8002908:	b087      	sub	sp, #28
 800290a:	af00      	add	r7, sp, #0
 800290c:	60f8      	str	r0, [r7, #12]
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f003 031f 	and.w	r3, r3, #31
 8002918:	2201      	movs	r2, #1
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	43db      	mvns	r3, r3
 8002928:	401a      	ands	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1a      	ldr	r2, [r3, #32]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f003 031f 	and.w	r3, r3, #31
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	fa01 f303 	lsl.w	r3, r1, r3
 800293e:	431a      	orrs	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	621a      	str	r2, [r3, #32]
}
 8002944:	bf00      	nop
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
	...

08002950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002960:	2b01      	cmp	r3, #1
 8002962:	d101      	bne.n	8002968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002964:	2302      	movs	r3, #2
 8002966:	e046      	b.n	80029f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2202      	movs	r2, #2
 8002974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a16      	ldr	r2, [pc, #88]	; (8002a00 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d00e      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029b4:	d009      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a12      	ldr	r2, [pc, #72]	; (8002a04 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d004      	beq.n	80029ca <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a10      	ldr	r2, [pc, #64]	; (8002a08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d10c      	bne.n	80029e4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68ba      	ldr	r2, [r7, #8]
 80029e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2200      	movs	r2, #0
 80029f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40012c00 	.word	0x40012c00
 8002a04:	40000400 	.word	0x40000400
 8002a08:	40000800 	.word	0x40000800

08002a0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e03d      	b.n	8002aa4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr
	...

08002ab0 <__libc_init_array>:
 8002ab0:	b570      	push	{r4, r5, r6, lr}
 8002ab2:	2600      	movs	r6, #0
 8002ab4:	4d0c      	ldr	r5, [pc, #48]	; (8002ae8 <__libc_init_array+0x38>)
 8002ab6:	4c0d      	ldr	r4, [pc, #52]	; (8002aec <__libc_init_array+0x3c>)
 8002ab8:	1b64      	subs	r4, r4, r5
 8002aba:	10a4      	asrs	r4, r4, #2
 8002abc:	42a6      	cmp	r6, r4
 8002abe:	d109      	bne.n	8002ad4 <__libc_init_array+0x24>
 8002ac0:	f000 f822 	bl	8002b08 <_init>
 8002ac4:	2600      	movs	r6, #0
 8002ac6:	4d0a      	ldr	r5, [pc, #40]	; (8002af0 <__libc_init_array+0x40>)
 8002ac8:	4c0a      	ldr	r4, [pc, #40]	; (8002af4 <__libc_init_array+0x44>)
 8002aca:	1b64      	subs	r4, r4, r5
 8002acc:	10a4      	asrs	r4, r4, #2
 8002ace:	42a6      	cmp	r6, r4
 8002ad0:	d105      	bne.n	8002ade <__libc_init_array+0x2e>
 8002ad2:	bd70      	pop	{r4, r5, r6, pc}
 8002ad4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ad8:	4798      	blx	r3
 8002ada:	3601      	adds	r6, #1
 8002adc:	e7ee      	b.n	8002abc <__libc_init_array+0xc>
 8002ade:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ae2:	4798      	blx	r3
 8002ae4:	3601      	adds	r6, #1
 8002ae6:	e7f2      	b.n	8002ace <__libc_init_array+0x1e>
 8002ae8:	08002b40 	.word	0x08002b40
 8002aec:	08002b40 	.word	0x08002b40
 8002af0:	08002b40 	.word	0x08002b40
 8002af4:	08002b44 	.word	0x08002b44

08002af8 <memset>:
 8002af8:	4603      	mov	r3, r0
 8002afa:	4402      	add	r2, r0
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d100      	bne.n	8002b02 <memset+0xa>
 8002b00:	4770      	bx	lr
 8002b02:	f803 1b01 	strb.w	r1, [r3], #1
 8002b06:	e7f9      	b.n	8002afc <memset+0x4>

08002b08 <_init>:
 8002b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0a:	bf00      	nop
 8002b0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b0e:	bc08      	pop	{r3}
 8002b10:	469e      	mov	lr, r3
 8002b12:	4770      	bx	lr

08002b14 <_fini>:
 8002b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b16:	bf00      	nop
 8002b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1a:	bc08      	pop	{r3}
 8002b1c:	469e      	mov	lr, r3
 8002b1e:	4770      	bx	lr
