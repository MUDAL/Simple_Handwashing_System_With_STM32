
Automated_Handwashing_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f4c  08002f4c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f4c  08002f4c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f4c  08002f4c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f4c  08002f4c  00012f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f50  08002f50  00012f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  08002f60  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08002f60  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e99  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014db  00000000  00000000  00027ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  000293b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  00029d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001661c  00000000  00000000  0002a5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009580  00000000  00000000  00040bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000840ea  00000000  00000000  0004a174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ce25e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000277c  00000000  00000000  000ce2b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f14 	.word	0x08002f14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002f14 	.word	0x08002f14

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <HandsDetected>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool HandsDetected(TIM_HandleTypeDef* htim)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b085      	sub	sp, #20
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	uint32_t pulseWidth = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	60bb      	str	r3, [r7, #8]
	uint32_t sensorDist = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	60fb      	str	r3, [r7, #12]
	if((htim->Instance->SR & TIM_SR_CC2IF) == TIM_SR_CC2IF)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	2b04      	cmp	r3, #4
 8000664:	d11c      	bne.n	80006a0 <HandsDetected+0x58>
	{
		pulseWidth = htim->Instance->CCR2;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800066c:	60bb      	str	r3, [r7, #8]
		sensorDist = (float)pulseWidth * htim->Init.Prescaler / (AHS_SYS_CLK_MHZ * 58);
 800066e:	68b8      	ldr	r0, [r7, #8]
 8000670:	f7ff fe22 	bl	80002b8 <__aeabi_ui2f>
 8000674:	4604      	mov	r4, r0
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	685b      	ldr	r3, [r3, #4]
 800067a:	4618      	mov	r0, r3
 800067c:	f7ff fe1c 	bl	80002b8 <__aeabi_ui2f>
 8000680:	4603      	mov	r3, r0
 8000682:	4619      	mov	r1, r3
 8000684:	4620      	mov	r0, r4
 8000686:	f7ff fe6f 	bl	8000368 <__aeabi_fmul>
 800068a:	4603      	mov	r3, r0
 800068c:	490b      	ldr	r1, [pc, #44]	; (80006bc <HandsDetected+0x74>)
 800068e:	4618      	mov	r0, r3
 8000690:	f7ff ff1e 	bl	80004d0 <__aeabi_fdiv>
 8000694:	4603      	mov	r3, r0
 8000696:	4618      	mov	r0, r3
 8000698:	f7ff ffb6 	bl	8000608 <__aeabi_f2uiz>
 800069c:	4603      	mov	r3, r0
 800069e:	60fb      	str	r3, [r7, #12]
	}

	if((sensorDist >= MIN_DETECTION_DIST) && (sensorDist <= MAX_DETECTION_DIST))
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d904      	bls.n	80006b0 <HandsDetected+0x68>
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b07      	cmp	r3, #7
 80006aa:	d801      	bhi.n	80006b0 <HandsDetected+0x68>
	{
		return true;
 80006ac:	2301      	movs	r3, #1
 80006ae:	e000      	b.n	80006b2 <HandsDetected+0x6a>
	}
	return false;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3714      	adds	r7, #20
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd90      	pop	{r4, r7, pc}
 80006ba:	bf00      	nop
 80006bc:	44680000 	.word	0x44680000

080006c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c6:	f000 fd03 	bl	80010d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ca:	f000 f89b 	bl	8000804 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ce:	f000 faf7 	bl	8000cc0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80006d2:	f000 f8d7 	bl	8000884 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006d6:	f000 f95b 	bl	8000990 <MX_TIM2_Init>
  MX_TIM3_Init();
 80006da:	f000 f9e1 	bl	8000aa0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80006de:	f000 fa67 	bl	8000bb0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //Variable(s)
  uint32_t soapDispensationTime = 10000; //10 secs default
 80006e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80006e6:	607b      	str	r3, [r7, #4]
  uint32_t soapValveShutOffTime = 60000; //1 minute default
 80006e8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80006ec:	603b      	str	r3, [r7, #0]
  bool soapFlowDisabled = false;
 80006ee:	2300      	movs	r3, #0
 80006f0:	73fb      	strb	r3, [r7, #15]
  bool soapDispenseStarted = false;
 80006f2:	2300      	movs	r3, #0
 80006f4:	73bb      	strb	r3, [r7, #14]
  bool soapValveShutOff = false;
 80006f6:	2300      	movs	r3, #0
 80006f8:	737b      	strb	r3, [r7, #13]
  bool firstTickMeasured = false;
 80006fa:	2300      	movs	r3, #0
 80006fc:	733b      	strb	r3, [r7, #12]
  uint32_t currTick = 0; //current tick
 80006fe:	2300      	movs	r3, #0
 8000700:	60bb      	str	r3, [r7, #8]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Read soap sensor and actuate soap valve
	  if(HandsDetected(&htim2))
 8000702:	483b      	ldr	r0, [pc, #236]	; (80007f0 <main+0x130>)
 8000704:	f7ff ffa0 	bl	8000648 <HandsDetected>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d018      	beq.n	8000740 <main+0x80>
	  {
		  if(!soapFlowDisabled)
 800070e:	7bfb      	ldrb	r3, [r7, #15]
 8000710:	f083 0301 	eor.w	r3, r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	2b00      	cmp	r3, #0
 8000718:	d017      	beq.n	800074a <main+0x8a>
		  {
			  HAL_GPIO_WritePin(soapValve_GPIO_Port, soapValve_Pin, GPIO_PIN_SET);
 800071a:	2201      	movs	r2, #1
 800071c:	2110      	movs	r1, #16
 800071e:	4835      	ldr	r0, [pc, #212]	; (80007f4 <main+0x134>)
 8000720:	f000 ffa0 	bl	8001664 <HAL_GPIO_WritePin>
			  soapDispenseStarted = true;
 8000724:	2301      	movs	r3, #1
 8000726:	73bb      	strb	r3, [r7, #14]
			  if(!firstTickMeasured)
 8000728:	7b3b      	ldrb	r3, [r7, #12]
 800072a:	f083 0301 	eor.w	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00a      	beq.n	800074a <main+0x8a>
			  {
				  currTick = HAL_GetTick();
 8000734:	f000 fd24 	bl	8001180 <HAL_GetTick>
 8000738:	60b8      	str	r0, [r7, #8]
				  firstTickMeasured = true;
 800073a:	2301      	movs	r3, #1
 800073c:	733b      	strb	r3, [r7, #12]
 800073e:	e004      	b.n	800074a <main+0x8a>
			  }
		  }
	  }
	  else
	  {
		  HAL_GPIO_WritePin(soapValve_GPIO_Port, soapValve_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2110      	movs	r1, #16
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <main+0x134>)
 8000746:	f000 ff8d 	bl	8001664 <HAL_GPIO_WritePin>
	  }
	  //If soap dispensation time has elapsed, shut-off ..
	  //the soap valve and start blinking LED
	  if(soapDispenseStarted)
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d017      	beq.n	8000780 <main+0xc0>
	  {
		  if((HAL_GetTick() - currTick) >= soapDispensationTime)
 8000750:	f000 fd16 	bl	8001180 <HAL_GetTick>
 8000754:	4602      	mov	r2, r0
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	d80f      	bhi.n	8000780 <main+0xc0>
		  {
			  HAL_GPIO_WritePin(soapValve_GPIO_Port, soapValve_Pin, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2110      	movs	r1, #16
 8000764:	4823      	ldr	r0, [pc, #140]	; (80007f4 <main+0x134>)
 8000766:	f000 ff7d 	bl	8001664 <HAL_GPIO_WritePin>
			  soapFlowDisabled = true;
 800076a:	2301      	movs	r3, #1
 800076c:	73fb      	strb	r3, [r7, #15]
			  soapValveShutOff = true;
 800076e:	2301      	movs	r3, #1
 8000770:	737b      	strb	r3, [r7, #13]
			  soapDispenseStarted = false;
 8000772:	2300      	movs	r3, #0
 8000774:	73bb      	strb	r3, [r7, #14]
			  currTick = HAL_GetTick();
 8000776:	f000 fd03 	bl	8001180 <HAL_GetTick>
 800077a:	60b8      	str	r0, [r7, #8]
			  StartTogglingLED();
 800077c:	f000 fc14 	bl	8000fa8 <StartTogglingLED>
		  }
	  }
	  //If valve shut off time has elapsed, restore ....
	  //soap valve and sensor
	  if(soapValveShutOff)
 8000780:	7b7b      	ldrb	r3, [r7, #13]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d00f      	beq.n	80007a6 <main+0xe6>
	  {
		  if((HAL_GetTick() - currTick) >= soapValveShutOffTime)
 8000786:	f000 fcfb 	bl	8001180 <HAL_GetTick>
 800078a:	4602      	mov	r2, r0
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	683a      	ldr	r2, [r7, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	d807      	bhi.n	80007a6 <main+0xe6>
		  {
			  soapValveShutOff = false;
 8000796:	2300      	movs	r3, #0
 8000798:	737b      	strb	r3, [r7, #13]
			  soapFlowDisabled = false;
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
			  firstTickMeasured = false;
 800079e:	2300      	movs	r3, #0
 80007a0:	733b      	strb	r3, [r7, #12]
			  StopTogglingLED();
 80007a2:	f000 fc0d 	bl	8000fc0 <StopTogglingLED>
		  }
	  }

	  //Read fan sensor and actuate fan
	  if(HandsDetected(&htim3))
 80007a6:	4814      	ldr	r0, [pc, #80]	; (80007f8 <main+0x138>)
 80007a8:	f7ff ff4e 	bl	8000648 <HandsDetected>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d005      	beq.n	80007be <main+0xfe>
	  {
		 HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2120      	movs	r1, #32
 80007b6:	4811      	ldr	r0, [pc, #68]	; (80007fc <main+0x13c>)
 80007b8:	f000 ff54 	bl	8001664 <HAL_GPIO_WritePin>
 80007bc:	e004      	b.n	80007c8 <main+0x108>
	  }
	  else
	  {
		 HAL_GPIO_WritePin(fan_GPIO_Port, fan_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2120      	movs	r1, #32
 80007c2:	480e      	ldr	r0, [pc, #56]	; (80007fc <main+0x13c>)
 80007c4:	f000 ff4e 	bl	8001664 <HAL_GPIO_WritePin>
	  }
	  //Read water sensor and actuate water valve (active low)
	  if(HandsDetected(&htim4))
 80007c8:	480d      	ldr	r0, [pc, #52]	; (8000800 <main+0x140>)
 80007ca:	f7ff ff3d 	bl	8000648 <HandsDetected>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <main+0x122>
	  {
		  HAL_GPIO_WritePin(waterValve_GPIO_Port, waterValve_Pin, GPIO_PIN_RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007da:	4808      	ldr	r0, [pc, #32]	; (80007fc <main+0x13c>)
 80007dc:	f000 ff42 	bl	8001664 <HAL_GPIO_WritePin>
 80007e0:	e78f      	b.n	8000702 <main+0x42>
	  }
	  else
	  {
		  HAL_GPIO_WritePin(waterValve_GPIO_Port, waterValve_Pin, GPIO_PIN_SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <main+0x13c>)
 80007ea:	f000 ff3b 	bl	8001664 <HAL_GPIO_WritePin>
	  if(HandsDetected(&htim2))
 80007ee:	e788      	b.n	8000702 <main+0x42>
 80007f0:	20000070 	.word	0x20000070
 80007f4:	40010800 	.word	0x40010800
 80007f8:	200000b8 	.word	0x200000b8
 80007fc:	40010c00 	.word	0x40010c00
 8000800:	20000100 	.word	0x20000100

08000804 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b090      	sub	sp, #64	; 0x40
 8000808:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080a:	f107 0318 	add.w	r3, r7, #24
 800080e:	2228      	movs	r2, #40	; 0x28
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f002 fb76 	bl	8002f04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000826:	2302      	movs	r3, #2
 8000828:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800082a:	2301      	movs	r3, #1
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082e:	2310      	movs	r3, #16
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000836:	2300      	movs	r3, #0
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800083a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4618      	mov	r0, r3
 8000846:	f000 ff3f 	bl	80016c8 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000850:	f000 fa8a 	bl	8000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2302      	movs	r3, #2
 800085a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f001 f9ad 	bl	8001bcc <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000878:	f000 fa76 	bl	8000d68 <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3740      	adds	r7, #64	; 0x40
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b092      	sub	sp, #72	; 0x48
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800088a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
 80008a4:	615a      	str	r2, [r3, #20]
 80008a6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2220      	movs	r2, #32
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f002 fb28 	bl	8002f04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b4:	4b34      	ldr	r3, [pc, #208]	; (8000988 <MX_TIM1_Init+0x104>)
 80008b6:	4a35      	ldr	r2, [pc, #212]	; (800098c <MX_TIM1_Init+0x108>)
 80008b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10 - 1;
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <MX_TIM1_Init+0x104>)
 80008bc:	2209      	movs	r2, #9
 80008be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <MX_TIM1_Init+0x104>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 32000 - 1;
 80008c6:	4b30      	ldr	r3, [pc, #192]	; (8000988 <MX_TIM1_Init+0x104>)
 80008c8:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80008cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ce:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <MX_TIM1_Init+0x104>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d4:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <MX_TIM1_Init+0x104>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <MX_TIM1_Init+0x104>)
 80008dc:	2280      	movs	r2, #128	; 0x80
 80008de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008e0:	4829      	ldr	r0, [pc, #164]	; (8000988 <MX_TIM1_Init+0x104>)
 80008e2:	f001 fb23 	bl	8001f2c <HAL_TIM_PWM_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80008ec:	f000 fa3c 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008fc:	4619      	mov	r1, r3
 80008fe:	4822      	ldr	r0, [pc, #136]	; (8000988 <MX_TIM1_Init+0x104>)
 8000900:	f002 fa2c 	bl	8002d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800090a:	f000 fa2d 	bl	8000d68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090e:	2360      	movs	r3, #96	; 0x60
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 24;
 8000912:	2318      	movs	r3, #24
 8000914:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000916:	2300      	movs	r3, #0
 8000918:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800091a:	2300      	movs	r3, #0
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000922:	2300      	movs	r3, #0
 8000924:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	2204      	movs	r2, #4
 8000930:	4619      	mov	r1, r3
 8000932:	4815      	ldr	r0, [pc, #84]	; (8000988 <MX_TIM1_Init+0x104>)
 8000934:	f001 fcec 	bl	8002310 <HAL_TIM_PWM_ConfigChannel>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800093e:	f000 fa13 	bl	8000d68 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	4619      	mov	r1, r3
 8000964:	4808      	ldr	r0, [pc, #32]	; (8000988 <MX_TIM1_Init+0x104>)
 8000966:	f002 fa57 	bl	8002e18 <HAL_TIMEx_ConfigBreakDeadTime>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000970:	f000 f9fa 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  //Start PWM signal for ultrasonic sensors
  HAL_TIM_Base_Start(&htim1);
 8000974:	4804      	ldr	r0, [pc, #16]	; (8000988 <MX_TIM1_Init+0x104>)
 8000976:	f001 fa8f 	bl	8001e98 <HAL_TIM_Base_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800097a:	4803      	ldr	r0, [pc, #12]	; (8000988 <MX_TIM1_Init+0x104>)
 800097c:	f000 fae0 	bl	8000f40 <HAL_TIM_MspPostInit>

}
 8000980:	bf00      	nop
 8000982:	3748      	adds	r7, #72	; 0x48
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000028 	.word	0x20000028
 800098c:	40012c00 	.word	0x40012c00

08000990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08c      	sub	sp, #48	; 0x30
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009bc:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <MX_TIM2_Init+0x10c>)
 80009be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200 - 1;
 80009c4:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <MX_TIM2_Init+0x10c>)
 80009c6:	22c7      	movs	r2, #199	; 0xc7
 80009c8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ca:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <MX_TIM2_Init+0x10c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16000 - 1;
 80009d0:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <MX_TIM2_Init+0x10c>)
 80009d2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80009d6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <MX_TIM2_Init+0x10c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009de:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <MX_TIM2_Init+0x10c>)
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80009e4:	482d      	ldr	r0, [pc, #180]	; (8000a9c <MX_TIM2_Init+0x10c>)
 80009e6:	f001 faf0 	bl	8001fca <HAL_TIM_IC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80009f0:	f000 f9ba 	bl	8000d68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80009f4:	2304      	movs	r3, #4
 80009f6:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80009f8:	2350      	movs	r3, #80	; 0x50
 80009fa:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0x0F;
 8000a04:	230f      	movs	r3, #15
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4823      	ldr	r0, [pc, #140]	; (8000a9c <MX_TIM2_Init+0x10c>)
 8000a10:	f001 fd3c 	bl	800248c <HAL_TIM_SlaveConfigSynchro>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a1a:	f000 f9a5 	bl	8000d68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a22:	2301      	movs	r3, #1
 8000a24:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0x0F;
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	2200      	movs	r2, #0
 8000a34:	4619      	mov	r1, r3
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <MX_TIM2_Init+0x10c>)
 8000a38:	f001 fbd6 	bl	80021e8 <HAL_TIM_IC_ConfigChannel>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000a42:	f000 f991 	bl	8000d68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a46:	2302      	movs	r3, #2
 8000a48:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000a4e:	f107 030c 	add.w	r3, r7, #12
 8000a52:	2204      	movs	r2, #4
 8000a54:	4619      	mov	r1, r3
 8000a56:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_TIM2_Init+0x10c>)
 8000a58:	f001 fbc6 	bl	80021e8 <HAL_TIM_IC_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000a62:	f000 f981 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	4619      	mov	r1, r3
 8000a72:	480a      	ldr	r0, [pc, #40]	; (8000a9c <MX_TIM2_Init+0x10c>)
 8000a74:	f002 f972 	bl	8002d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000a7e:	f000 f973 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  //Start input capture
  HAL_TIM_IC_Start(&htim2,TIM_CHANNEL_1);
 8000a82:	2100      	movs	r1, #0
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <MX_TIM2_Init+0x10c>)
 8000a86:	f001 faef 	bl	8002068 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2,TIM_CHANNEL_2);
 8000a8a:	2104      	movs	r1, #4
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <MX_TIM2_Init+0x10c>)
 8000a8e:	f001 faeb 	bl	8002068 <HAL_TIM_IC_Start>
  /* USER CODE END TIM2_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	3730      	adds	r7, #48	; 0x30
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000070 	.word	0x20000070

08000aa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000aa6:	f107 031c 	add.w	r3, r7, #28
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
 8000ab0:	609a      	str	r2, [r3, #8]
 8000ab2:	60da      	str	r2, [r3, #12]
 8000ab4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ab6:	f107 030c 	add.w	r3, r7, #12
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000acc:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000ace:	4a37      	ldr	r2, [pc, #220]	; (8000bac <MX_TIM3_Init+0x10c>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200 - 1;
 8000ad2:	4b35      	ldr	r3, [pc, #212]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000ad4:	22c7      	movs	r2, #199	; 0xc7
 8000ad6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad8:	4b33      	ldr	r3, [pc, #204]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000 - 1;
 8000ade:	4b32      	ldr	r3, [pc, #200]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000ae0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000ae4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae6:	4b30      	ldr	r3, [pc, #192]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000aec:	4b2e      	ldr	r3, [pc, #184]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000aee:	2280      	movs	r2, #128	; 0x80
 8000af0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000af2:	482d      	ldr	r0, [pc, #180]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000af4:	f001 fa69 	bl	8001fca <HAL_TIM_IC_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000afe:	f000 f933 	bl	8000d68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b02:	2304      	movs	r3, #4
 8000b04:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b06:	2350      	movs	r3, #80	; 0x50
 8000b08:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0x0F;
 8000b12:	230f      	movs	r3, #15
 8000b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000b16:	f107 031c 	add.w	r3, r7, #28
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4822      	ldr	r0, [pc, #136]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000b1e:	f001 fcb5 	bl	800248c <HAL_TIM_SlaveConfigSynchro>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b28:	f000 f91e 	bl	8000d68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b30:	2301      	movs	r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0x0F;
 8000b38:	230f      	movs	r3, #15
 8000b3a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	2200      	movs	r2, #0
 8000b42:	4619      	mov	r1, r3
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000b46:	f001 fb4f 	bl	80021e8 <HAL_TIM_IC_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b50:	f000 f90a 	bl	8000d68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b54:	2302      	movs	r3, #2
 8000b56:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2204      	movs	r2, #4
 8000b62:	4619      	mov	r1, r3
 8000b64:	4810      	ldr	r0, [pc, #64]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000b66:	f001 fb3f 	bl	80021e8 <HAL_TIM_IC_ConfigChannel>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000b70:	f000 f8fa 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000b82:	f002 f8eb 	bl	8002d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 8000b8c:	f000 f8ec 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  //Start input capture
  HAL_TIM_IC_Start(&htim3,TIM_CHANNEL_1);
 8000b90:	2100      	movs	r1, #0
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000b94:	f001 fa68 	bl	8002068 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim3,TIM_CHANNEL_2);
 8000b98:	2104      	movs	r1, #4
 8000b9a:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <MX_TIM3_Init+0x108>)
 8000b9c:	f001 fa64 	bl	8002068 <HAL_TIM_IC_Start>
  /* USER CODE END TIM3_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3730      	adds	r7, #48	; 0x30
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200000b8 	.word	0x200000b8
 8000bac:	40000400 	.word	0x40000400

08000bb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
 8000bc4:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	1d3b      	adds	r3, r7, #4
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000bdc:	4b36      	ldr	r3, [pc, #216]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000bde:	4a37      	ldr	r2, [pc, #220]	; (8000cbc <MX_TIM4_Init+0x10c>)
 8000be0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200 - 1;
 8000be2:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000be4:	22c7      	movs	r2, #199	; 0xc7
 8000be6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b33      	ldr	r3, [pc, #204]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 16000 - 1;
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000bf0:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000bf4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b30      	ldr	r3, [pc, #192]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bfc:	4b2e      	ldr	r3, [pc, #184]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000bfe:	2280      	movs	r2, #128	; 0x80
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000c02:	482d      	ldr	r0, [pc, #180]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000c04:	f001 f9e1 	bl	8001fca <HAL_TIM_IC_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000c0e:	f000 f8ab 	bl	8000d68 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000c12:	2304      	movs	r3, #4
 8000c14:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000c16:	2350      	movs	r3, #80	; 0x50
 8000c18:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0x0F;
 8000c22:	230f      	movs	r3, #15
 8000c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4822      	ldr	r0, [pc, #136]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000c2e:	f001 fc2d 	bl	800248c <HAL_TIM_SlaveConfigSynchro>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000c38:	f000 f896 	bl	8000d68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000c40:	2301      	movs	r3, #1
 8000c42:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0x0F;
 8000c48:	230f      	movs	r3, #15
 8000c4a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2200      	movs	r2, #0
 8000c52:	4619      	mov	r1, r3
 8000c54:	4818      	ldr	r0, [pc, #96]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000c56:	f001 fac7 	bl	80021e8 <HAL_TIM_IC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000c60:	f000 f882 	bl	8000d68 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000c64:	2302      	movs	r3, #2
 8000c66:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	2204      	movs	r2, #4
 8000c72:	4619      	mov	r1, r3
 8000c74:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000c76:	f001 fab7 	bl	80021e8 <HAL_TIM_IC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000c80:	f000 f872 	bl	8000d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4809      	ldr	r0, [pc, #36]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000c92:	f002 f863 	bl	8002d5c <HAL_TIMEx_MasterConfigSynchronization>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8000c9c:	f000 f864 	bl	8000d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  //Start input capture
  HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_1);
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000ca4:	f001 f9e0 	bl	8002068 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim4,TIM_CHANNEL_2);
 8000ca8:	2104      	movs	r1, #4
 8000caa:	4803      	ldr	r0, [pc, #12]	; (8000cb8 <MX_TIM4_Init+0x108>)
 8000cac:	f001 f9dc 	bl	8002068 <HAL_TIM_IC_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3730      	adds	r7, #48	; 0x30
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	20000100 	.word	0x20000100
 8000cbc:	40000800 	.word	0x40000800

08000cc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b086      	sub	sp, #24
 8000cc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc6:	f107 0308 	add.w	r3, r7, #8
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd4:	4b21      	ldr	r3, [pc, #132]	; (8000d5c <MX_GPIO_Init+0x9c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a20      	ldr	r2, [pc, #128]	; (8000d5c <MX_GPIO_Init+0x9c>)
 8000cda:	f043 0304 	orr.w	r3, r3, #4
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <MX_GPIO_Init+0x9c>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <MX_GPIO_Init+0x9c>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a1a      	ldr	r2, [pc, #104]	; (8000d5c <MX_GPIO_Init+0x9c>)
 8000cf2:	f043 0308 	orr.w	r3, r3, #8
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <MX_GPIO_Init+0x9c>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0308 	and.w	r3, r3, #8
 8000d00:	603b      	str	r3, [r7, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, soapValve_Pin|soapLED_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2130      	movs	r1, #48	; 0x30
 8000d08:	4815      	ldr	r0, [pc, #84]	; (8000d60 <MX_GPIO_Init+0xa0>)
 8000d0a:	f000 fcab 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, waterValve_Pin|fan_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8000d14:	4813      	ldr	r0, [pc, #76]	; (8000d64 <MX_GPIO_Init+0xa4>)
 8000d16:	f000 fca5 	bl	8001664 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : soapValve_Pin soapLED_Pin */
  GPIO_InitStruct.Pin = soapValve_Pin|soapLED_Pin;
 8000d1a:	2330      	movs	r3, #48	; 0x30
 8000d1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2302      	movs	r3, #2
 8000d28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	4619      	mov	r1, r3
 8000d30:	480b      	ldr	r0, [pc, #44]	; (8000d60 <MX_GPIO_Init+0xa0>)
 8000d32:	f000 fb13 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : waterValve_Pin fan_Pin */
  GPIO_InitStruct.Pin = waterValve_Pin|fan_Pin;
 8000d36:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8000d3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2302      	movs	r3, #2
 8000d46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_GPIO_Init+0xa4>)
 8000d50:	f000 fb04 	bl	800135c <HAL_GPIO_Init>

}
 8000d54:	bf00      	nop
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010800 	.word	0x40010800
 8000d64:	40010c00 	.word	0x40010c00

08000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d6c:	b672      	cpsid	i
}
 8000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <Error_Handler+0x8>
	...

08000d74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_MspInit+0x60>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_MspInit+0x60>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a09      	ldr	r2, [pc, #36]	; (8000e0c <HAL_TIM_PWM_MspInit+0x34>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d10b      	bne.n	8000e02 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_TIM_PWM_MspInit+0x38>)
 8000dec:	699b      	ldr	r3, [r3, #24]
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_TIM_PWM_MspInit+0x38>)
 8000df0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000df4:	6193      	str	r3, [r2, #24]
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_TIM_PWM_MspInit+0x38>)
 8000df8:	699b      	ldr	r3, [r3, #24]
 8000dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	40012c00 	.word	0x40012c00
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 0320 	add.w	r3, r7, #32
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
  if(htim_ic->Instance==TIM2)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e32:	d124      	bne.n	8000e7e <HAL_TIM_IC_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e34:	4b3d      	ldr	r3, [pc, #244]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	4a3c      	ldr	r2, [pc, #240]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000e3a:	f043 0301 	orr.w	r3, r3, #1
 8000e3e:	61d3      	str	r3, [r2, #28]
 8000e40:	4b3a      	ldr	r3, [pc, #232]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000e42:	69db      	ldr	r3, [r3, #28]
 8000e44:	f003 0301 	and.w	r3, r3, #1
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b37      	ldr	r3, [pc, #220]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	4a36      	ldr	r2, [pc, #216]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6193      	str	r3, [r2, #24]
 8000e58:	4b34      	ldr	r3, [pc, #208]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	f003 0304 	and.w	r3, r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
 8000e62:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = soapSensor_Pin;
 8000e64:	2301      	movs	r3, #1
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(soapSensor_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	4619      	mov	r1, r3
 8000e76:	482e      	ldr	r0, [pc, #184]	; (8000f30 <HAL_TIM_IC_MspInit+0x11c>)
 8000e78:	f000 fa70 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e7c:	e052      	b.n	8000f24 <HAL_TIM_IC_MspInit+0x110>
  else if(htim_ic->Instance==TIM3)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a2c      	ldr	r2, [pc, #176]	; (8000f34 <HAL_TIM_IC_MspInit+0x120>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d124      	bne.n	8000ed2 <HAL_TIM_IC_MspInit+0xbe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e88:	4b28      	ldr	r3, [pc, #160]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000e8a:	69db      	ldr	r3, [r3, #28]
 8000e8c:	4a27      	ldr	r2, [pc, #156]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000e8e:	f043 0302 	orr.w	r3, r3, #2
 8000e92:	61d3      	str	r3, [r2, #28]
 8000e94:	4b25      	ldr	r3, [pc, #148]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000ea6:	f043 0304 	orr.w	r3, r3, #4
 8000eaa:	6193      	str	r3, [r2, #24]
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	f003 0304 	and.w	r3, r3, #4
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = fanSensor_Pin;
 8000eb8:	2340      	movs	r3, #64	; 0x40
 8000eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(fanSensor_GPIO_Port, &GPIO_InitStruct);
 8000ec4:	f107 0320 	add.w	r3, r7, #32
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4819      	ldr	r0, [pc, #100]	; (8000f30 <HAL_TIM_IC_MspInit+0x11c>)
 8000ecc:	f000 fa46 	bl	800135c <HAL_GPIO_Init>
}
 8000ed0:	e028      	b.n	8000f24 <HAL_TIM_IC_MspInit+0x110>
  else if(htim_ic->Instance==TIM4)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a18      	ldr	r2, [pc, #96]	; (8000f38 <HAL_TIM_IC_MspInit+0x124>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d123      	bne.n	8000f24 <HAL_TIM_IC_MspInit+0x110>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	4a12      	ldr	r2, [pc, #72]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000ee2:	f043 0304 	orr.w	r3, r3, #4
 8000ee6:	61d3      	str	r3, [r2, #28]
 8000ee8:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	f003 0304 	and.w	r3, r3, #4
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a0c      	ldr	r2, [pc, #48]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <HAL_TIM_IC_MspInit+0x118>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = waterSensor_Pin;
 8000f0c:	2340      	movs	r3, #64	; 0x40
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(waterSensor_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0320 	add.w	r3, r7, #32
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4807      	ldr	r0, [pc, #28]	; (8000f3c <HAL_TIM_IC_MspInit+0x128>)
 8000f20:	f000 fa1c 	bl	800135c <HAL_GPIO_Init>
}
 8000f24:	bf00      	nop
 8000f26:	3730      	adds	r7, #48	; 0x30
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010800 	.word	0x40010800
 8000f34:	40000400 	.word	0x40000400
 8000f38:	40000800 	.word	0x40000800
 8000f3c:	40010c00 	.word	0x40010c00

08000f40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b088      	sub	sp, #32
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <HAL_TIM_MspPostInit+0x5c>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d118      	bne.n	8000f92 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f60:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_TIM_MspPostInit+0x60>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_TIM_MspPostInit+0x60>)
 8000f66:	f043 0304 	orr.w	r3, r3, #4
 8000f6a:	6193      	str	r3, [r2, #24]
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_TIM_MspPostInit+0x60>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	f003 0304 	and.w	r3, r3, #4
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = sensorTrigger_Pin;
 8000f78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2302      	movs	r3, #2
 8000f84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(sensorTrigger_GPIO_Port, &GPIO_InitStruct);
 8000f86:	f107 0310 	add.w	r3, r7, #16
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <HAL_TIM_MspPostInit+0x64>)
 8000f8e:	f000 f9e5 	bl	800135c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f92:	bf00      	nop
 8000f94:	3720      	adds	r7, #32
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	40010800 	.word	0x40010800

08000fa8 <StartTogglingLED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void StartTogglingLED(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
	toggleLED = true;
 8000fac:	4b03      	ldr	r3, [pc, #12]	; (8000fbc <StartTogglingLED+0x14>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000148 	.word	0x20000148

08000fc0 <StopTogglingLED>:

void StopTogglingLED(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	toggleLED = false;
 8000fc4:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <StopTogglingLED+0x18>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(soapLED_GPIO_Port, soapLED_Pin, GPIO_PIN_RESET);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2120      	movs	r1, #32
 8000fce:	4803      	ldr	r0, [pc, #12]	; (8000fdc <StopTogglingLED+0x1c>)
 8000fd0:	f000 fb48 	bl	8001664 <HAL_GPIO_WritePin>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20000148 	.word	0x20000148
 8000fdc:	40010800 	.word	0x40010800

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fea:	e7fe      	b.n	8000fea <HardFault_Handler+0x4>

08000fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <MemManage_Handler+0x4>

08000ff2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <BusFault_Handler+0x4>

08000ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <UsageFault_Handler+0x4>

08000ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	bc80      	pop	{r7}
 8001008:	4770      	bx	lr

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr

08001016 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
	...

08001024 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001028:	f000 f898 	bl	800115c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if(toggleLED)
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <SysTick_Handler+0x44>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d017      	beq.n	8001064 <SysTick_Handler+0x40>
  {
	  static uint16_t count;
	  if((count % 1000) == 0)
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <SysTick_Handler+0x48>)
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	4a0d      	ldr	r2, [pc, #52]	; (8001070 <SysTick_Handler+0x4c>)
 800103a:	fba2 1203 	umull	r1, r2, r2, r3
 800103e:	0992      	lsrs	r2, r2, #6
 8001040:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001044:	fb01 f202 	mul.w	r2, r1, r2
 8001048:	1a9b      	subs	r3, r3, r2
 800104a:	b29b      	uxth	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d103      	bne.n	8001058 <SysTick_Handler+0x34>
	  {
		  HAL_GPIO_TogglePin(soapLED_GPIO_Port, soapLED_Pin);
 8001050:	2120      	movs	r1, #32
 8001052:	4808      	ldr	r0, [pc, #32]	; (8001074 <SysTick_Handler+0x50>)
 8001054:	f000 fb1e 	bl	8001694 <HAL_GPIO_TogglePin>
	  }
	  count++;
 8001058:	4b04      	ldr	r3, [pc, #16]	; (800106c <SysTick_Handler+0x48>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	3301      	adds	r3, #1
 800105e:	b29a      	uxth	r2, r3
 8001060:	4b02      	ldr	r3, [pc, #8]	; (800106c <SysTick_Handler+0x48>)
 8001062:	801a      	strh	r2, [r3, #0]
  }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20000148 	.word	0x20000148
 800106c:	2000014a 	.word	0x2000014a
 8001070:	10624dd3 	.word	0x10624dd3
 8001074:	40010800 	.word	0x40010800

08001078 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001086:	490d      	ldr	r1, [pc, #52]	; (80010bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800109c:	4c0a      	ldr	r4, [pc, #40]	; (80010c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010aa:	f7ff ffe5 	bl	8001078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ae:	f001 ff05 	bl	8002ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b2:	f7ff fb05 	bl	80006c0 <main>
  bx lr
 80010b6:	4770      	bx	lr
  ldr r0, =_sdata
 80010b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80010c0:	08002f54 	.word	0x08002f54
  ldr r2, =_sbss
 80010c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80010c8:	20000150 	.word	0x20000150

080010cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010cc:	e7fe      	b.n	80010cc <ADC1_2_IRQHandler>
	...

080010d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_Init+0x28>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_Init+0x28>)
 80010da:	f043 0310 	orr.w	r3, r3, #16
 80010de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f907 	bl	80012f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010e6:	200f      	movs	r0, #15
 80010e8:	f000 f808 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff fe42 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f0:	2300      	movs	r3, #0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40022000 	.word	0x40022000

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b12      	ldr	r3, [pc, #72]	; (8001150 <HAL_InitTick+0x54>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <HAL_InitTick+0x58>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4619      	mov	r1, r3
 800110e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001112:	fbb3 f3f1 	udiv	r3, r3, r1
 8001116:	fbb2 f3f3 	udiv	r3, r2, r3
 800111a:	4618      	mov	r0, r3
 800111c:	f000 f911 	bl	8001342 <HAL_SYSTICK_Config>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e00e      	b.n	8001148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b0f      	cmp	r3, #15
 800112e:	d80a      	bhi.n	8001146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001130:	2200      	movs	r2, #0
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f000 f8e7 	bl	800130a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800113c:	4a06      	ldr	r2, [pc, #24]	; (8001158 <HAL_InitTick+0x5c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
}
 8001148:	4618      	mov	r0, r3
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000
 8001154:	20000008 	.word	0x20000008
 8001158:	20000004 	.word	0x20000004

0800115c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <HAL_IncTick+0x1c>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x20>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a03      	ldr	r2, [pc, #12]	; (800117c <HAL_IncTick+0x20>)
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	20000008 	.word	0x20000008
 800117c:	2000014c 	.word	0x2000014c

08001180 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b02      	ldr	r3, [pc, #8]	; (8001190 <HAL_GetTick+0x10>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr
 8001190:	2000014c 	.word	0x2000014c

08001194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b0:	4013      	ands	r3, r2
 80011b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011c6:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <__NVIC_SetPriorityGrouping+0x44>)
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	60d3      	str	r3, [r2, #12]
}
 80011cc:	bf00      	nop
 80011ce:	3714      	adds	r7, #20
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	; (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	; (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	; 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	; 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr

080012b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012c0:	d301      	bcc.n	80012c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c2:	2301      	movs	r3, #1
 80012c4:	e00f      	b.n	80012e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c6:	4a0a      	ldr	r2, [pc, #40]	; (80012f0 <SysTick_Config+0x40>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3b01      	subs	r3, #1
 80012cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ce:	210f      	movs	r1, #15
 80012d0:	f04f 30ff 	mov.w	r0, #4294967295
 80012d4:	f7ff ff90 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <SysTick_Config+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012de:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <SysTick_Config+0x40>)
 80012e0:	2207      	movs	r2, #7
 80012e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	e000e010 	.word	0xe000e010

080012f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff49 	bl	8001194 <__NVIC_SetPriorityGrouping>
}
 8001302:	bf00      	nop
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	4603      	mov	r3, r0
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
 8001316:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131c:	f7ff ff5e 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001320:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	68b9      	ldr	r1, [r7, #8]
 8001326:	6978      	ldr	r0, [r7, #20]
 8001328:	f7ff ff90 	bl	800124c <NVIC_EncodePriority>
 800132c:	4602      	mov	r2, r0
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff5f 	bl	80011f8 <__NVIC_SetPriority>
}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffb0 	bl	80012b0 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b08b      	sub	sp, #44	; 0x2c
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800136a:	2300      	movs	r3, #0
 800136c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800136e:	e169      	b.n	8001644 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001370:	2201      	movs	r2, #1
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	69fa      	ldr	r2, [r7, #28]
 8001380:	4013      	ands	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	429a      	cmp	r2, r3
 800138a:	f040 8158 	bne.w	800163e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4a9a      	ldr	r2, [pc, #616]	; (80015fc <HAL_GPIO_Init+0x2a0>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d05e      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 8001398:	4a98      	ldr	r2, [pc, #608]	; (80015fc <HAL_GPIO_Init+0x2a0>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d875      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 800139e:	4a98      	ldr	r2, [pc, #608]	; (8001600 <HAL_GPIO_Init+0x2a4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d058      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013a4:	4a96      	ldr	r2, [pc, #600]	; (8001600 <HAL_GPIO_Init+0x2a4>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d86f      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013aa:	4a96      	ldr	r2, [pc, #600]	; (8001604 <HAL_GPIO_Init+0x2a8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d052      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013b0:	4a94      	ldr	r2, [pc, #592]	; (8001604 <HAL_GPIO_Init+0x2a8>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d869      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013b6:	4a94      	ldr	r2, [pc, #592]	; (8001608 <HAL_GPIO_Init+0x2ac>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d04c      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013bc:	4a92      	ldr	r2, [pc, #584]	; (8001608 <HAL_GPIO_Init+0x2ac>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d863      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013c2:	4a92      	ldr	r2, [pc, #584]	; (800160c <HAL_GPIO_Init+0x2b0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d046      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
 80013c8:	4a90      	ldr	r2, [pc, #576]	; (800160c <HAL_GPIO_Init+0x2b0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d85d      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013ce:	2b12      	cmp	r3, #18
 80013d0:	d82a      	bhi.n	8001428 <HAL_GPIO_Init+0xcc>
 80013d2:	2b12      	cmp	r3, #18
 80013d4:	d859      	bhi.n	800148a <HAL_GPIO_Init+0x12e>
 80013d6:	a201      	add	r2, pc, #4	; (adr r2, 80013dc <HAL_GPIO_Init+0x80>)
 80013d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013dc:	08001457 	.word	0x08001457
 80013e0:	08001431 	.word	0x08001431
 80013e4:	08001443 	.word	0x08001443
 80013e8:	08001485 	.word	0x08001485
 80013ec:	0800148b 	.word	0x0800148b
 80013f0:	0800148b 	.word	0x0800148b
 80013f4:	0800148b 	.word	0x0800148b
 80013f8:	0800148b 	.word	0x0800148b
 80013fc:	0800148b 	.word	0x0800148b
 8001400:	0800148b 	.word	0x0800148b
 8001404:	0800148b 	.word	0x0800148b
 8001408:	0800148b 	.word	0x0800148b
 800140c:	0800148b 	.word	0x0800148b
 8001410:	0800148b 	.word	0x0800148b
 8001414:	0800148b 	.word	0x0800148b
 8001418:	0800148b 	.word	0x0800148b
 800141c:	0800148b 	.word	0x0800148b
 8001420:	08001439 	.word	0x08001439
 8001424:	0800144d 	.word	0x0800144d
 8001428:	4a79      	ldr	r2, [pc, #484]	; (8001610 <HAL_GPIO_Init+0x2b4>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800142e:	e02c      	b.n	800148a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	623b      	str	r3, [r7, #32]
          break;
 8001436:	e029      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	3304      	adds	r3, #4
 800143e:	623b      	str	r3, [r7, #32]
          break;
 8001440:	e024      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68db      	ldr	r3, [r3, #12]
 8001446:	3308      	adds	r3, #8
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e01f      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	330c      	adds	r3, #12
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e01a      	b.n	800148c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d102      	bne.n	8001464 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800145e:	2304      	movs	r3, #4
 8001460:	623b      	str	r3, [r7, #32]
          break;
 8001462:	e013      	b.n	800148c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	2b01      	cmp	r3, #1
 800146a:	d105      	bne.n	8001478 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146c:	2308      	movs	r3, #8
 800146e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	611a      	str	r2, [r3, #16]
          break;
 8001476:	e009      	b.n	800148c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001478:	2308      	movs	r3, #8
 800147a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	615a      	str	r2, [r3, #20]
          break;
 8001482:	e003      	b.n	800148c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
          break;
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x130>
          break;
 800148a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2bff      	cmp	r3, #255	; 0xff
 8001490:	d801      	bhi.n	8001496 <HAL_GPIO_Init+0x13a>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	e001      	b.n	800149a <HAL_GPIO_Init+0x13e>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3304      	adds	r3, #4
 800149a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2bff      	cmp	r3, #255	; 0xff
 80014a0:	d802      	bhi.n	80014a8 <HAL_GPIO_Init+0x14c>
 80014a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	e002      	b.n	80014ae <HAL_GPIO_Init+0x152>
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	3b08      	subs	r3, #8
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	210f      	movs	r1, #15
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	401a      	ands	r2, r3
 80014c0:	6a39      	ldr	r1, [r7, #32]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	fa01 f303 	lsl.w	r3, r1, r3
 80014c8:	431a      	orrs	r2, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80b1 	beq.w	800163e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014dc:	4b4d      	ldr	r3, [pc, #308]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a4c      	ldr	r2, [pc, #304]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b4a      	ldr	r3, [pc, #296]	; (8001614 <HAL_GPIO_Init+0x2b8>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014f4:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_GPIO_Init+0x2bc>)
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4a40      	ldr	r2, [pc, #256]	; (800161c <HAL_GPIO_Init+0x2c0>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d013      	beq.n	8001548 <HAL_GPIO_Init+0x1ec>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a3f      	ldr	r2, [pc, #252]	; (8001620 <HAL_GPIO_Init+0x2c4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d00d      	beq.n	8001544 <HAL_GPIO_Init+0x1e8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a3e      	ldr	r2, [pc, #248]	; (8001624 <HAL_GPIO_Init+0x2c8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d007      	beq.n	8001540 <HAL_GPIO_Init+0x1e4>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a3d      	ldr	r2, [pc, #244]	; (8001628 <HAL_GPIO_Init+0x2cc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d101      	bne.n	800153c <HAL_GPIO_Init+0x1e0>
 8001538:	2303      	movs	r3, #3
 800153a:	e006      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 800153c:	2304      	movs	r3, #4
 800153e:	e004      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001540:	2302      	movs	r3, #2
 8001542:	e002      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001544:	2301      	movs	r3, #1
 8001546:	e000      	b.n	800154a <HAL_GPIO_Init+0x1ee>
 8001548:	2300      	movs	r3, #0
 800154a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154c:	f002 0203 	and.w	r2, r2, #3
 8001550:	0092      	lsls	r2, r2, #2
 8001552:	4093      	lsls	r3, r2
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4313      	orrs	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800155a:	492f      	ldr	r1, [pc, #188]	; (8001618 <HAL_GPIO_Init+0x2bc>)
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	3302      	adds	r3, #2
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_GPIO_Init+0x2d0>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	492c      	ldr	r1, [pc, #176]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e006      	b.n	8001590 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_GPIO_Init+0x2d0>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	43db      	mvns	r3, r3
 800158a:	4928      	ldr	r1, [pc, #160]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800158c:	4013      	ands	r3, r2
 800158e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d006      	beq.n	80015aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <HAL_GPIO_Init+0x2d0>)
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4922      	ldr	r1, [pc, #136]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
 80015a8:	e006      	b.n	80015b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015aa:	4b20      	ldr	r3, [pc, #128]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	43db      	mvns	r3, r3
 80015b2:	491e      	ldr	r1, [pc, #120]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015c4:	4b19      	ldr	r3, [pc, #100]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	4918      	ldr	r1, [pc, #96]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]
 80015d0:	e006      	b.n	80015e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015d2:	4b16      	ldr	r3, [pc, #88]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	43db      	mvns	r3, r3
 80015da:	4914      	ldr	r1, [pc, #80]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d021      	beq.n	8001630 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015ee:	68da      	ldr	r2, [r3, #12]
 80015f0:	490e      	ldr	r1, [pc, #56]	; (800162c <HAL_GPIO_Init+0x2d0>)
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	60cb      	str	r3, [r1, #12]
 80015f8:	e021      	b.n	800163e <HAL_GPIO_Init+0x2e2>
 80015fa:	bf00      	nop
 80015fc:	10320000 	.word	0x10320000
 8001600:	10310000 	.word	0x10310000
 8001604:	10220000 	.word	0x10220000
 8001608:	10210000 	.word	0x10210000
 800160c:	10120000 	.word	0x10120000
 8001610:	10110000 	.word	0x10110000
 8001614:	40021000 	.word	0x40021000
 8001618:	40010000 	.word	0x40010000
 800161c:	40010800 	.word	0x40010800
 8001620:	40010c00 	.word	0x40010c00
 8001624:	40011000 	.word	0x40011000
 8001628:	40011400 	.word	0x40011400
 800162c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001630:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_GPIO_Init+0x304>)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	43db      	mvns	r3, r3
 8001638:	4909      	ldr	r1, [pc, #36]	; (8001660 <HAL_GPIO_Init+0x304>)
 800163a:	4013      	ands	r3, r2
 800163c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	3301      	adds	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	fa22 f303 	lsr.w	r3, r2, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	f47f ae8e 	bne.w	8001370 <HAL_GPIO_Init+0x14>
  }
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	372c      	adds	r7, #44	; 0x2c
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	40010400 	.word	0x40010400

08001664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	460b      	mov	r3, r1
 800166e:	807b      	strh	r3, [r7, #2]
 8001670:	4613      	mov	r3, r2
 8001672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001674:	787b      	ldrb	r3, [r7, #1]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001680:	e003      	b.n	800168a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001682:	887b      	ldrh	r3, [r7, #2]
 8001684:	041a      	lsls	r2, r3, #16
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	611a      	str	r2, [r3, #16]
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016a6:	887a      	ldrh	r2, [r7, #2]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4013      	ands	r3, r2
 80016ac:	041a      	lsls	r2, r3, #16
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	43d9      	mvns	r1, r3
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	400b      	ands	r3, r1
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	611a      	str	r2, [r3, #16]
}
 80016bc:	bf00      	nop
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bc80      	pop	{r7}
 80016c4:	4770      	bx	lr
	...

080016c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d101      	bne.n	80016da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e272      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8087 	beq.w	80017f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016e8:	4b92      	ldr	r3, [pc, #584]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 030c 	and.w	r3, r3, #12
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	d00c      	beq.n	800170e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016f4:	4b8f      	ldr	r3, [pc, #572]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 030c 	and.w	r3, r3, #12
 80016fc:	2b08      	cmp	r3, #8
 80016fe:	d112      	bne.n	8001726 <HAL_RCC_OscConfig+0x5e>
 8001700:	4b8c      	ldr	r3, [pc, #560]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170c:	d10b      	bne.n	8001726 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170e:	4b89      	ldr	r3, [pc, #548]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d06c      	beq.n	80017f4 <HAL_RCC_OscConfig+0x12c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d168      	bne.n	80017f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e24c      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x76>
 8001730:	4b80      	ldr	r3, [pc, #512]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a7f      	ldr	r2, [pc, #508]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	e02e      	b.n	800179c <HAL_RCC_OscConfig+0xd4>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x98>
 8001746:	4b7b      	ldr	r3, [pc, #492]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a7a      	ldr	r2, [pc, #488]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800174c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b78      	ldr	r3, [pc, #480]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a77      	ldr	r2, [pc, #476]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001758:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e01d      	b.n	800179c <HAL_RCC_OscConfig+0xd4>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001768:	d10c      	bne.n	8001784 <HAL_RCC_OscConfig+0xbc>
 800176a:	4b72      	ldr	r3, [pc, #456]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a71      	ldr	r2, [pc, #452]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001774:	6013      	str	r3, [r2, #0]
 8001776:	4b6f      	ldr	r3, [pc, #444]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a6e      	ldr	r2, [pc, #440]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	e00b      	b.n	800179c <HAL_RCC_OscConfig+0xd4>
 8001784:	4b6b      	ldr	r3, [pc, #428]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a6a      	ldr	r2, [pc, #424]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800178a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b68      	ldr	r3, [pc, #416]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a67      	ldr	r2, [pc, #412]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d013      	beq.n	80017cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fcec 	bl	8001180 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ac:	f7ff fce8 	bl	8001180 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b64      	cmp	r3, #100	; 0x64
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e200      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017be:	4b5d      	ldr	r3, [pc, #372]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0xe4>
 80017ca:	e014      	b.n	80017f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff fcd8 	bl	8001180 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fcd4 	bl	8001180 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e1ec      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017e6:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <HAL_RCC_OscConfig+0x10c>
 80017f2:	e000      	b.n	80017f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d063      	beq.n	80018ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001802:	4b4c      	ldr	r3, [pc, #304]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 030c 	and.w	r3, r3, #12
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00b      	beq.n	8001826 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800180e:	4b49      	ldr	r3, [pc, #292]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f003 030c 	and.w	r3, r3, #12
 8001816:	2b08      	cmp	r3, #8
 8001818:	d11c      	bne.n	8001854 <HAL_RCC_OscConfig+0x18c>
 800181a:	4b46      	ldr	r3, [pc, #280]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d116      	bne.n	8001854 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001826:	4b43      	ldr	r3, [pc, #268]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d005      	beq.n	800183e <HAL_RCC_OscConfig+0x176>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d001      	beq.n	800183e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e1c0      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	4939      	ldr	r1, [pc, #228]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	e03a      	b.n	80018ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d020      	beq.n	800189e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800185c:	4b36      	ldr	r3, [pc, #216]	; (8001938 <HAL_RCC_OscConfig+0x270>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fc8d 	bl	8001180 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186a:	f7ff fc89 	bl	8001180 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e1a1      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187c:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4927      	ldr	r1, [pc, #156]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
 800189c:	e015      	b.n	80018ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <HAL_RCC_OscConfig+0x270>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fc6c 	bl	8001180 <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ac:	f7ff fc68 	bl	8001180 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e180      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f0      	bne.n	80018ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d03a      	beq.n	800194c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d019      	beq.n	8001912 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_RCC_OscConfig+0x274>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff fc4c 	bl	8001180 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ec:	f7ff fc48 	bl	8001180 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e160      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018fe:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <HAL_RCC_OscConfig+0x26c>)
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d0f0      	beq.n	80018ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800190a:	2001      	movs	r0, #1
 800190c:	f000 faa6 	bl	8001e5c <RCC_Delay>
 8001910:	e01c      	b.n	800194c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_RCC_OscConfig+0x274>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001918:	f7ff fc32 	bl	8001180 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800191e:	e00f      	b.n	8001940 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001920:	f7ff fc2e 	bl	8001180 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d908      	bls.n	8001940 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e146      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	42420000 	.word	0x42420000
 800193c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001940:	4b92      	ldr	r3, [pc, #584]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1e9      	bne.n	8001920 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	2b00      	cmp	r3, #0
 8001956:	f000 80a6 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800195e:	4b8b      	ldr	r3, [pc, #556]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10d      	bne.n	8001986 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	4a87      	ldr	r2, [pc, #540]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001974:	61d3      	str	r3, [r2, #28]
 8001976:	4b85      	ldr	r3, [pc, #532]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	60bb      	str	r3, [r7, #8]
 8001980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001982:	2301      	movs	r3, #1
 8001984:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001986:	4b82      	ldr	r3, [pc, #520]	; (8001b90 <HAL_RCC_OscConfig+0x4c8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198e:	2b00      	cmp	r3, #0
 8001990:	d118      	bne.n	80019c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001992:	4b7f      	ldr	r3, [pc, #508]	; (8001b90 <HAL_RCC_OscConfig+0x4c8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a7e      	ldr	r2, [pc, #504]	; (8001b90 <HAL_RCC_OscConfig+0x4c8>)
 8001998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800199c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800199e:	f7ff fbef 	bl	8001180 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019a6:	f7ff fbeb 	bl	8001180 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b64      	cmp	r3, #100	; 0x64
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e103      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b8:	4b75      	ldr	r3, [pc, #468]	; (8001b90 <HAL_RCC_OscConfig+0x4c8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d106      	bne.n	80019da <HAL_RCC_OscConfig+0x312>
 80019cc:	4b6f      	ldr	r3, [pc, #444]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	4a6e      	ldr	r2, [pc, #440]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	6213      	str	r3, [r2, #32]
 80019d8:	e02d      	b.n	8001a36 <HAL_RCC_OscConfig+0x36e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10c      	bne.n	80019fc <HAL_RCC_OscConfig+0x334>
 80019e2:	4b6a      	ldr	r3, [pc, #424]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	4a69      	ldr	r2, [pc, #420]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 80019e8:	f023 0301 	bic.w	r3, r3, #1
 80019ec:	6213      	str	r3, [r2, #32]
 80019ee:	4b67      	ldr	r3, [pc, #412]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 80019f0:	6a1b      	ldr	r3, [r3, #32]
 80019f2:	4a66      	ldr	r2, [pc, #408]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 80019f4:	f023 0304 	bic.w	r3, r3, #4
 80019f8:	6213      	str	r3, [r2, #32]
 80019fa:	e01c      	b.n	8001a36 <HAL_RCC_OscConfig+0x36e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d10c      	bne.n	8001a1e <HAL_RCC_OscConfig+0x356>
 8001a04:	4b61      	ldr	r3, [pc, #388]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001a06:	6a1b      	ldr	r3, [r3, #32]
 8001a08:	4a60      	ldr	r2, [pc, #384]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001a0a:	f043 0304 	orr.w	r3, r3, #4
 8001a0e:	6213      	str	r3, [r2, #32]
 8001a10:	4b5e      	ldr	r3, [pc, #376]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	6a1b      	ldr	r3, [r3, #32]
 8001a14:	4a5d      	ldr	r2, [pc, #372]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001a16:	f043 0301 	orr.w	r3, r3, #1
 8001a1a:	6213      	str	r3, [r2, #32]
 8001a1c:	e00b      	b.n	8001a36 <HAL_RCC_OscConfig+0x36e>
 8001a1e:	4b5b      	ldr	r3, [pc, #364]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4a5a      	ldr	r2, [pc, #360]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f023 0301 	bic.w	r3, r3, #1
 8001a28:	6213      	str	r3, [r2, #32]
 8001a2a:	4b58      	ldr	r3, [pc, #352]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	6a1b      	ldr	r3, [r3, #32]
 8001a2e:	4a57      	ldr	r2, [pc, #348]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	f023 0304 	bic.w	r3, r3, #4
 8001a34:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d015      	beq.n	8001a6a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a3e:	f7ff fb9f 	bl	8001180 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a44:	e00a      	b.n	8001a5c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a46:	f7ff fb9b 	bl	8001180 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0b1      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5c:	4b4b      	ldr	r3, [pc, #300]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	6a1b      	ldr	r3, [r3, #32]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0ee      	beq.n	8001a46 <HAL_RCC_OscConfig+0x37e>
 8001a68:	e014      	b.n	8001a94 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6a:	f7ff fb89 	bl	8001180 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7ff fb85 	bl	8001180 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e09b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a88:	4b40      	ldr	r3, [pc, #256]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1ee      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d105      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9a:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	4a3b      	ldr	r2, [pc, #236]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f000 8087 	beq.w	8001bbe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab0:	4b36      	ldr	r3, [pc, #216]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d061      	beq.n	8001b80 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d146      	bne.n	8001b52 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac4:	4b33      	ldr	r3, [pc, #204]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aca:	f7ff fb59 	bl	8001180 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad2:	f7ff fb55 	bl	8001180 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e06d      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae4:	4b29      	ldr	r3, [pc, #164]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1f0      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af8:	d108      	bne.n	8001b0c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001afa:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4921      	ldr	r1, [pc, #132]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a19      	ldr	r1, [r3, #32]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	430b      	orrs	r3, r1
 8001b1e:	491b      	ldr	r1, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2a:	f7ff fb29 	bl	8001180 <HAL_GetTick>
 8001b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b30:	e008      	b.n	8001b44 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b32:	f7ff fb25 	bl	8001180 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e03d      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0f0      	beq.n	8001b32 <HAL_RCC_OscConfig+0x46a>
 8001b50:	e035      	b.n	8001bbe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <HAL_RCC_OscConfig+0x4cc>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b58:	f7ff fb12 	bl	8001180 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b60:	f7ff fb0e 	bl	8001180 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e026      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d1f0      	bne.n	8001b60 <HAL_RCC_OscConfig+0x498>
 8001b7e:	e01e      	b.n	8001bbe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d107      	bne.n	8001b98 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e019      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40007000 	.word	0x40007000
 8001b94:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_RCC_OscConfig+0x500>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d106      	bne.n	8001bba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d001      	beq.n	8001bbe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000

08001bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0d0      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be0:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d910      	bls.n	8001c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b67      	ldr	r3, [pc, #412]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0207 	bic.w	r2, r3, #7
 8001bf6:	4965      	ldr	r1, [pc, #404]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0b8      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c28:	4b59      	ldr	r3, [pc, #356]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c40:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	494d      	ldr	r1, [pc, #308]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d040      	beq.n	8001cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d115      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e07f      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e073      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e06b      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001caa:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f023 0203 	bic.w	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4936      	ldr	r1, [pc, #216]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff fa60 	bl	8001180 <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc4:	f7ff fa5c 	bl	8001180 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e053      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 020c 	and.w	r2, r3, #12
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d1eb      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cec:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d210      	bcs.n	8001d1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 0207 	bic.w	r2, r3, #7
 8001d02:	4922      	ldr	r1, [pc, #136]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e032      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4916      	ldr	r1, [pc, #88]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d5a:	f000 f821 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	490a      	ldr	r1, [pc, #40]	; (8001d94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6c:	5ccb      	ldrb	r3, [r1, r3]
 8001d6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x1cc>)
 8001d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_ClockConfig+0x1d0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f9be 	bl	80010fc <HAL_InitTick>

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08002f3c 	.word	0x08002f3c
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	20000004 	.word	0x20000004

08001da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b490      	push	{r4, r7}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001da6:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xac>)
 8001da8:	1d3c      	adds	r4, r7, #4
 8001daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001db0:	f240 2301 	movw	r3, #513	; 0x201
 8001db4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d002      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x40>
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0x46>
 8001dde:	e02b      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de0:	4b1c      	ldr	r3, [pc, #112]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001de2:	623b      	str	r3, [r7, #32]
      break;
 8001de4:	e02b      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	0c9b      	lsrs	r3, r3, #18
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3328      	adds	r3, #40	; 0x28
 8001df0:	443b      	add	r3, r7
 8001df2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001df6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d012      	beq.n	8001e28 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	0c5b      	lsrs	r3, r3, #17
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	3328      	adds	r3, #40	; 0x28
 8001e0e:	443b      	add	r3, r7
 8001e10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e1a:	fb03 f202 	mul.w	r2, r3, r2
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
 8001e26:	e004      	b.n	8001e32 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e2c:	fb02 f303 	mul.w	r3, r2, r3
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	623b      	str	r3, [r7, #32]
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001e3a:	623b      	str	r3, [r7, #32]
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3728      	adds	r7, #40	; 0x28
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bc90      	pop	{r4, r7}
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	08002f2c 	.word	0x08002f2c
 8001e50:	40021000 	.word	0x40021000
 8001e54:	007a1200 	.word	0x007a1200
 8001e58:	003d0900 	.word	0x003d0900

08001e5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <RCC_Delay+0x34>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <RCC_Delay+0x38>)
 8001e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e6e:	0a5b      	lsrs	r3, r3, #9
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	fb02 f303 	mul.w	r3, r2, r3
 8001e76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e78:	bf00      	nop
  }
  while (Delay --);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	1e5a      	subs	r2, r3, #1
 8001e7e:	60fa      	str	r2, [r7, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f9      	bne.n	8001e78 <RCC_Delay+0x1c>
}
 8001e84:	bf00      	nop
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr
 8001e90:	20000000 	.word	0x20000000
 8001e94:	10624dd3 	.word	0x10624dd3

08001e98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d001      	beq.n	8001eb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e032      	b.n	8001f16 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2202      	movs	r2, #2
 8001eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a18      	ldr	r2, [pc, #96]	; (8001f20 <HAL_TIM_Base_Start+0x88>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00e      	beq.n	8001ee0 <HAL_TIM_Base_Start+0x48>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eca:	d009      	beq.n	8001ee0 <HAL_TIM_Base_Start+0x48>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <HAL_TIM_Base_Start+0x8c>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d004      	beq.n	8001ee0 <HAL_TIM_Base_Start+0x48>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <HAL_TIM_Base_Start+0x90>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d111      	bne.n	8001f04 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d010      	beq.n	8001f14 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f042 0201 	orr.w	r2, r2, #1
 8001f00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f02:	e007      	b.n	8001f14 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f042 0201 	orr.w	r2, r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800

08001f2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e041      	b.n	8001fc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe ff40 	bl	8000dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	f000 fad0 	bl	8002510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d101      	bne.n	8001fdc <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e041      	b.n	8002060 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d106      	bne.n	8001ff6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7fe ff0f 	bl	8000e14 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3304      	adds	r3, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4610      	mov	r0, r2
 800200a:	f000 fa81 	bl	8002510 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2201      	movs	r2, #1
 8002022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2201      	movs	r2, #1
 800204a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d104      	bne.n	8002082 <HAL_TIM_IC_Start+0x1a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800207e:	b2db      	uxtb	r3, r3
 8002080:	e013      	b.n	80020aa <HAL_TIM_IC_Start+0x42>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	2b04      	cmp	r3, #4
 8002086:	d104      	bne.n	8002092 <HAL_TIM_IC_Start+0x2a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800208e:	b2db      	uxtb	r3, r3
 8002090:	e00b      	b.n	80020aa <HAL_TIM_IC_Start+0x42>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d104      	bne.n	80020a2 <HAL_TIM_IC_Start+0x3a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	e003      	b.n	80020aa <HAL_TIM_IC_Start+0x42>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d104      	bne.n	80020bc <HAL_TIM_IC_Start+0x54>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e013      	b.n	80020e4 <HAL_TIM_IC_Start+0x7c>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d104      	bne.n	80020cc <HAL_TIM_IC_Start+0x64>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e00b      	b.n	80020e4 <HAL_TIM_IC_Start+0x7c>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d104      	bne.n	80020dc <HAL_TIM_IC_Start+0x74>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	e003      	b.n	80020e4 <HAL_TIM_IC_Start+0x7c>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d102      	bne.n	80020f2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80020ec:	7bbb      	ldrb	r3, [r7, #14]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d001      	beq.n	80020f6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06d      	b.n	80021d2 <HAL_TIM_IC_Start+0x16a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d104      	bne.n	8002106 <HAL_TIM_IC_Start+0x9e>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2202      	movs	r2, #2
 8002100:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002104:	e013      	b.n	800212e <HAL_TIM_IC_Start+0xc6>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b04      	cmp	r3, #4
 800210a:	d104      	bne.n	8002116 <HAL_TIM_IC_Start+0xae>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2202      	movs	r2, #2
 8002110:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002114:	e00b      	b.n	800212e <HAL_TIM_IC_Start+0xc6>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d104      	bne.n	8002126 <HAL_TIM_IC_Start+0xbe>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2202      	movs	r2, #2
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002124:	e003      	b.n	800212e <HAL_TIM_IC_Start+0xc6>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d104      	bne.n	800213e <HAL_TIM_IC_Start+0xd6>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800213c:	e013      	b.n	8002166 <HAL_TIM_IC_Start+0xfe>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b04      	cmp	r3, #4
 8002142:	d104      	bne.n	800214e <HAL_TIM_IC_Start+0xe6>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2202      	movs	r2, #2
 8002148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800214c:	e00b      	b.n	8002166 <HAL_TIM_IC_Start+0xfe>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b08      	cmp	r3, #8
 8002152:	d104      	bne.n	800215e <HAL_TIM_IC_Start+0xf6>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800215c:	e003      	b.n	8002166 <HAL_TIM_IC_Start+0xfe>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2201      	movs	r2, #1
 800216c:	6839      	ldr	r1, [r7, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f000 fdcf 	bl	8002d12 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a18      	ldr	r2, [pc, #96]	; (80021dc <HAL_TIM_IC_Start+0x174>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d00e      	beq.n	800219c <HAL_TIM_IC_Start+0x134>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002186:	d009      	beq.n	800219c <HAL_TIM_IC_Start+0x134>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a14      	ldr	r2, [pc, #80]	; (80021e0 <HAL_TIM_IC_Start+0x178>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d004      	beq.n	800219c <HAL_TIM_IC_Start+0x134>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a13      	ldr	r2, [pc, #76]	; (80021e4 <HAL_TIM_IC_Start+0x17c>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d111      	bne.n	80021c0 <HAL_TIM_IC_Start+0x158>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d010      	beq.n	80021d0 <HAL_TIM_IC_Start+0x168>
    {
      __HAL_TIM_ENABLE(htim);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 0201 	orr.w	r2, r2, #1
 80021bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021be:	e007      	b.n	80021d0 <HAL_TIM_IC_Start+0x168>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d0:	2300      	movs	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40012c00 	.word	0x40012c00
 80021e0:	40000400 	.word	0x40000400
 80021e4:	40000800 	.word	0x40000800

080021e8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_TIM_IC_ConfigChannel+0x1a>
 80021fe:	2302      	movs	r3, #2
 8002200:	e082      	b.n	8002308 <HAL_TIM_IC_ConfigChannel+0x120>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d11b      	bne.n	8002248 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	6819      	ldr	r1, [r3, #0]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f000 fbee 	bl	8002a00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 020c 	bic.w	r2, r2, #12
 8002232:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6999      	ldr	r1, [r3, #24]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	619a      	str	r2, [r3, #24]
 8002246:	e05a      	b.n	80022fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b04      	cmp	r3, #4
 800224c:	d11c      	bne.n	8002288 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	6819      	ldr	r1, [r3, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f000 fc57 	bl	8002b10 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	699a      	ldr	r2, [r3, #24]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002270:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6999      	ldr	r1, [r3, #24]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	021a      	lsls	r2, r3, #8
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	619a      	str	r2, [r3, #24]
 8002286:	e03a      	b.n	80022fe <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b08      	cmp	r3, #8
 800228c:	d11b      	bne.n	80022c6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	6819      	ldr	r1, [r3, #0]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	f000 fca2 	bl	8002be6 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69da      	ldr	r2, [r3, #28]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 020c 	bic.w	r2, r2, #12
 80022b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69d9      	ldr	r1, [r3, #28]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	61da      	str	r2, [r3, #28]
 80022c4:	e01b      	b.n	80022fe <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6818      	ldr	r0, [r3, #0]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	6819      	ldr	r1, [r3, #0]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f000 fcc1 	bl	8002c5c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80022e8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	69d9      	ldr	r1, [r3, #28]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	021a      	lsls	r2, r3, #8
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002322:	2b01      	cmp	r3, #1
 8002324:	d101      	bne.n	800232a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002326:	2302      	movs	r3, #2
 8002328:	e0ac      	b.n	8002484 <HAL_TIM_PWM_ConfigChannel+0x174>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b0c      	cmp	r3, #12
 8002336:	f200 809f 	bhi.w	8002478 <HAL_TIM_PWM_ConfigChannel+0x168>
 800233a:	a201      	add	r2, pc, #4	; (adr r2, 8002340 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800233c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002340:	08002375 	.word	0x08002375
 8002344:	08002479 	.word	0x08002479
 8002348:	08002479 	.word	0x08002479
 800234c:	08002479 	.word	0x08002479
 8002350:	080023b5 	.word	0x080023b5
 8002354:	08002479 	.word	0x08002479
 8002358:	08002479 	.word	0x08002479
 800235c:	08002479 	.word	0x08002479
 8002360:	080023f7 	.word	0x080023f7
 8002364:	08002479 	.word	0x08002479
 8002368:	08002479 	.word	0x08002479
 800236c:	08002479 	.word	0x08002479
 8002370:	08002437 	.word	0x08002437
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	68b9      	ldr	r1, [r7, #8]
 800237a:	4618      	mov	r0, r3
 800237c:	f000 f92a 	bl	80025d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f042 0208 	orr.w	r2, r2, #8
 800238e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0204 	bic.w	r2, r2, #4
 800239e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6999      	ldr	r1, [r3, #24]
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	619a      	str	r2, [r3, #24]
      break;
 80023b2:	e062      	b.n	800247a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f970 	bl	80026a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6999      	ldr	r1, [r3, #24]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	021a      	lsls	r2, r3, #8
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	619a      	str	r2, [r3, #24]
      break;
 80023f4:	e041      	b.n	800247a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68b9      	ldr	r1, [r7, #8]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f9b9 	bl	8002774 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	69da      	ldr	r2, [r3, #28]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0208 	orr.w	r2, r2, #8
 8002410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0204 	bic.w	r2, r2, #4
 8002420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69d9      	ldr	r1, [r3, #28]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	61da      	str	r2, [r3, #28]
      break;
 8002434:	e021      	b.n	800247a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fa03 	bl	8002848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	69da      	ldr	r2, [r3, #28]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69da      	ldr	r2, [r3, #28]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	69d9      	ldr	r1, [r3, #28]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	021a      	lsls	r2, r3, #8
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	430a      	orrs	r2, r1
 8002474:	61da      	str	r2, [r3, #28]
      break;
 8002476:	e000      	b.n	800247a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002478:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e031      	b.n	8002508 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80024b4:	6839      	ldr	r1, [r7, #0]
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa14 	bl	80028e4 <TIM_SlaveTimer_SetConfig>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e018      	b.n	8002508 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024e4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68da      	ldr	r2, [r3, #12]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024f4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a29      	ldr	r2, [pc, #164]	; (80025c8 <TIM_Base_SetConfig+0xb8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d00b      	beq.n	8002540 <TIM_Base_SetConfig+0x30>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252e:	d007      	beq.n	8002540 <TIM_Base_SetConfig+0x30>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a26      	ldr	r2, [pc, #152]	; (80025cc <TIM_Base_SetConfig+0xbc>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d003      	beq.n	8002540 <TIM_Base_SetConfig+0x30>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <TIM_Base_SetConfig+0xc0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d108      	bne.n	8002552 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <TIM_Base_SetConfig+0xb8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00b      	beq.n	8002572 <TIM_Base_SetConfig+0x62>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002560:	d007      	beq.n	8002572 <TIM_Base_SetConfig+0x62>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a19      	ldr	r2, [pc, #100]	; (80025cc <TIM_Base_SetConfig+0xbc>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d003      	beq.n	8002572 <TIM_Base_SetConfig+0x62>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a18      	ldr	r2, [pc, #96]	; (80025d0 <TIM_Base_SetConfig+0xc0>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d108      	bne.n	8002584 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	4313      	orrs	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	4313      	orrs	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <TIM_Base_SetConfig+0xb8>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d103      	bne.n	80025b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	615a      	str	r2, [r3, #20]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40012c00 	.word	0x40012c00
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40000800 	.word	0x40000800

080025d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	f023 0201 	bic.w	r2, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f023 0303 	bic.w	r3, r3, #3
 800260a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68fa      	ldr	r2, [r7, #12]
 8002612:	4313      	orrs	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f023 0302 	bic.w	r3, r3, #2
 800261c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a1c      	ldr	r2, [pc, #112]	; (800269c <TIM_OC1_SetConfig+0xc8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d10c      	bne.n	800264a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f023 0308 	bic.w	r3, r3, #8
 8002636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	697a      	ldr	r2, [r7, #20]
 800263e:	4313      	orrs	r3, r2
 8002640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f023 0304 	bic.w	r3, r3, #4
 8002648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a13      	ldr	r2, [pc, #76]	; (800269c <TIM_OC1_SetConfig+0xc8>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d111      	bne.n	8002676 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002658:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002660:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	621a      	str	r2, [r3, #32]
}
 8002690:	bf00      	nop
 8002692:	371c      	adds	r7, #28
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40012c00 	.word	0x40012c00

080026a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f023 0210 	bic.w	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	699b      	ldr	r3, [r3, #24]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	021b      	lsls	r3, r3, #8
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	f023 0320 	bic.w	r3, r3, #32
 80026ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a1d      	ldr	r2, [pc, #116]	; (8002770 <TIM_OC2_SetConfig+0xd0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d10d      	bne.n	800271c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002706:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	011b      	lsls	r3, r3, #4
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	4313      	orrs	r3, r2
 8002712:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800271a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a14      	ldr	r2, [pc, #80]	; (8002770 <TIM_OC2_SetConfig+0xd0>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d113      	bne.n	800274c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800272a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002732:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	621a      	str	r2, [r3, #32]
}
 8002766:	bf00      	nop
 8002768:	371c      	adds	r7, #28
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40012c00 	.word	0x40012c00

08002774 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69db      	ldr	r3, [r3, #28]
 800279a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0303 	bic.w	r3, r3, #3
 80027aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	021b      	lsls	r3, r3, #8
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1d      	ldr	r2, [pc, #116]	; (8002844 <TIM_OC3_SetConfig+0xd0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d10d      	bne.n	80027ee <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	021b      	lsls	r3, r3, #8
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a14      	ldr	r2, [pc, #80]	; (8002844 <TIM_OC3_SetConfig+0xd0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d113      	bne.n	800281e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002804:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	695b      	ldr	r3, [r3, #20]
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	693a      	ldr	r2, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	693a      	ldr	r2, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	693a      	ldr	r2, [r7, #16]
 8002822:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	621a      	str	r2, [r3, #32]
}
 8002838:	bf00      	nop
 800283a:	371c      	adds	r7, #28
 800283c:	46bd      	mov	sp, r7
 800283e:	bc80      	pop	{r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40012c00 	.word	0x40012c00

08002848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	031b      	lsls	r3, r3, #12
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <TIM_OC4_SetConfig+0x98>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d109      	bne.n	80028bc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	019b      	lsls	r3, r3, #6
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68fa      	ldr	r2, [r7, #12]
 80028c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	621a      	str	r2, [r3, #32]
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	40012c00 	.word	0x40012c00

080028e4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0307 	bic.w	r3, r3, #7
 800290e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b70      	cmp	r3, #112	; 0x70
 8002928:	d01a      	beq.n	8002960 <TIM_SlaveTimer_SetConfig+0x7c>
 800292a:	2b70      	cmp	r3, #112	; 0x70
 800292c:	d860      	bhi.n	80029f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800292e:	2b60      	cmp	r3, #96	; 0x60
 8002930:	d054      	beq.n	80029dc <TIM_SlaveTimer_SetConfig+0xf8>
 8002932:	2b60      	cmp	r3, #96	; 0x60
 8002934:	d85c      	bhi.n	80029f0 <TIM_SlaveTimer_SetConfig+0x10c>
 8002936:	2b50      	cmp	r3, #80	; 0x50
 8002938:	d046      	beq.n	80029c8 <TIM_SlaveTimer_SetConfig+0xe4>
 800293a:	2b50      	cmp	r3, #80	; 0x50
 800293c:	d858      	bhi.n	80029f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800293e:	2b40      	cmp	r3, #64	; 0x40
 8002940:	d019      	beq.n	8002976 <TIM_SlaveTimer_SetConfig+0x92>
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d854      	bhi.n	80029f0 <TIM_SlaveTimer_SetConfig+0x10c>
 8002946:	2b30      	cmp	r3, #48	; 0x30
 8002948:	d054      	beq.n	80029f4 <TIM_SlaveTimer_SetConfig+0x110>
 800294a:	2b30      	cmp	r3, #48	; 0x30
 800294c:	d850      	bhi.n	80029f0 <TIM_SlaveTimer_SetConfig+0x10c>
 800294e:	2b20      	cmp	r3, #32
 8002950:	d050      	beq.n	80029f4 <TIM_SlaveTimer_SetConfig+0x110>
 8002952:	2b20      	cmp	r3, #32
 8002954:	d84c      	bhi.n	80029f0 <TIM_SlaveTimer_SetConfig+0x10c>
 8002956:	2b00      	cmp	r3, #0
 8002958:	d04c      	beq.n	80029f4 <TIM_SlaveTimer_SetConfig+0x110>
 800295a:	2b10      	cmp	r3, #16
 800295c:	d04a      	beq.n	80029f4 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800295e:	e047      	b.n	80029f0 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68d9      	ldr	r1, [r3, #12]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	f000 f9b0 	bl	8002cd4 <TIM_ETR_SetConfig>
      break;
 8002974:	e03f      	b.n	80029f6 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d101      	bne.n	8002982 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e03a      	b.n	80029f8 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6a1a      	ldr	r2, [r3, #32]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029a8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	621a      	str	r2, [r3, #32]
      break;
 80029c6:	e016      	b.n	80029f6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6818      	ldr	r0, [r3, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6899      	ldr	r1, [r3, #8]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	461a      	mov	r2, r3
 80029d6:	f000 f86d 	bl	8002ab4 <TIM_TI1_ConfigInputStage>
      break;
 80029da:	e00c      	b.n	80029f6 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6899      	ldr	r1, [r3, #8]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	461a      	mov	r2, r3
 80029ea:	f000 f8cd 	bl	8002b88 <TIM_TI2_ConfigInputStage>
      break;
 80029ee:	e002      	b.n	80029f6 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 80029f0:	bf00      	nop
 80029f2:	e000      	b.n	80029f6 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 80029f4:	bf00      	nop
  }
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3718      	adds	r7, #24
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f023 0201 	bic.w	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4a1f      	ldr	r2, [pc, #124]	; (8002aa8 <TIM_TI1_SetConfig+0xa8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00b      	beq.n	8002a46 <TIM_TI1_SetConfig+0x46>
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a34:	d007      	beq.n	8002a46 <TIM_TI1_SetConfig+0x46>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	4a1c      	ldr	r2, [pc, #112]	; (8002aac <TIM_TI1_SetConfig+0xac>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d003      	beq.n	8002a46 <TIM_TI1_SetConfig+0x46>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <TIM_TI1_SetConfig+0xb0>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d101      	bne.n	8002a4a <TIM_TI1_SetConfig+0x4a>
 8002a46:	2301      	movs	r3, #1
 8002a48:	e000      	b.n	8002a4c <TIM_TI1_SetConfig+0x4c>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f023 0303 	bic.w	r3, r3, #3
 8002a56:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a58:	697a      	ldr	r2, [r7, #20]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	e003      	b.n	8002a6a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	697a      	ldr	r2, [r7, #20]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	f023 030a 	bic.w	r3, r3, #10
 8002a84:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 030a 	and.w	r3, r3, #10
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	621a      	str	r2, [r3, #32]
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr
 8002aa8:	40012c00 	.word	0x40012c00
 8002aac:	40000400 	.word	0x40000400
 8002ab0:	40000800 	.word	0x40000800

08002ab4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f023 0201 	bic.w	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	011b      	lsls	r3, r3, #4
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f023 030a 	bic.w	r3, r3, #10
 8002af0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002af2:	697a      	ldr	r2, [r7, #20]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	621a      	str	r2, [r3, #32]
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f023 0210 	bic.w	r2, r3, #16
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6a1b      	ldr	r3, [r3, #32]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	031b      	lsls	r3, r3, #12
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	621a      	str	r2, [r3, #32]
}
 8002b7e:	bf00      	nop
 8002b80:	371c      	adds	r7, #28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f023 0210 	bic.w	r2, r3, #16
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	031b      	lsls	r3, r3, #12
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bc4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	621a      	str	r2, [r3, #32]
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b087      	sub	sp, #28
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	607a      	str	r2, [r7, #4]
 8002bf2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	f023 0303 	bic.w	r3, r3, #3
 8002c12:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002c14:	697a      	ldr	r2, [r7, #20]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c22:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c36:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	621a      	str	r2, [r3, #32]
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr

08002c5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b087      	sub	sp, #28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c88:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	021b      	lsls	r3, r3, #8
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c9a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	031b      	lsls	r3, r3, #12
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	031b      	lsls	r3, r3, #12
 8002cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr

08002cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	021a      	lsls	r2, r3, #8
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	609a      	str	r2, [r3, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b087      	sub	sp, #28
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2201      	movs	r2, #1
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1a      	ldr	r2, [r3, #32]
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	401a      	ands	r2, r3
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a1a      	ldr	r2, [r3, #32]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	621a      	str	r2, [r3, #32]
}
 8002d50:	bf00      	nop
 8002d52:	371c      	adds	r7, #28
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d70:	2302      	movs	r3, #2
 8002d72:	e046      	b.n	8002e02 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a16      	ldr	r2, [pc, #88]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00e      	beq.n	8002dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dc0:	d009      	beq.n	8002dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a12      	ldr	r2, [pc, #72]	; (8002e10 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10c      	bne.n	8002df0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	68ba      	ldr	r2, [r7, #8]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68ba      	ldr	r2, [r7, #8]
 8002dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr
 8002e0c:	40012c00 	.word	0x40012c00
 8002e10:	40000400 	.word	0x40000400
 8002e14:	40000800 	.word	0x40000800

08002e18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b085      	sub	sp, #20
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e03d      	b.n	8002eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr
	...

08002ebc <__libc_init_array>:
 8002ebc:	b570      	push	{r4, r5, r6, lr}
 8002ebe:	2600      	movs	r6, #0
 8002ec0:	4d0c      	ldr	r5, [pc, #48]	; (8002ef4 <__libc_init_array+0x38>)
 8002ec2:	4c0d      	ldr	r4, [pc, #52]	; (8002ef8 <__libc_init_array+0x3c>)
 8002ec4:	1b64      	subs	r4, r4, r5
 8002ec6:	10a4      	asrs	r4, r4, #2
 8002ec8:	42a6      	cmp	r6, r4
 8002eca:	d109      	bne.n	8002ee0 <__libc_init_array+0x24>
 8002ecc:	f000 f822 	bl	8002f14 <_init>
 8002ed0:	2600      	movs	r6, #0
 8002ed2:	4d0a      	ldr	r5, [pc, #40]	; (8002efc <__libc_init_array+0x40>)
 8002ed4:	4c0a      	ldr	r4, [pc, #40]	; (8002f00 <__libc_init_array+0x44>)
 8002ed6:	1b64      	subs	r4, r4, r5
 8002ed8:	10a4      	asrs	r4, r4, #2
 8002eda:	42a6      	cmp	r6, r4
 8002edc:	d105      	bne.n	8002eea <__libc_init_array+0x2e>
 8002ede:	bd70      	pop	{r4, r5, r6, pc}
 8002ee0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ee4:	4798      	blx	r3
 8002ee6:	3601      	adds	r6, #1
 8002ee8:	e7ee      	b.n	8002ec8 <__libc_init_array+0xc>
 8002eea:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eee:	4798      	blx	r3
 8002ef0:	3601      	adds	r6, #1
 8002ef2:	e7f2      	b.n	8002eda <__libc_init_array+0x1e>
 8002ef4:	08002f4c 	.word	0x08002f4c
 8002ef8:	08002f4c 	.word	0x08002f4c
 8002efc:	08002f4c 	.word	0x08002f4c
 8002f00:	08002f50 	.word	0x08002f50

08002f04 <memset>:
 8002f04:	4603      	mov	r3, r0
 8002f06:	4402      	add	r2, r0
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d100      	bne.n	8002f0e <memset+0xa>
 8002f0c:	4770      	bx	lr
 8002f0e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f12:	e7f9      	b.n	8002f08 <memset+0x4>

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	bf00      	nop
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	bf00      	nop
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
